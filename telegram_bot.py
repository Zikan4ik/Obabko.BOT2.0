#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import os
import logging
from datetime import datetime
from telegram import Update
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    ConversationHandler,
    CallbackContext
)
import gspread
from oauth2client.service_account import ServiceAccountCredentials
import json # –î–æ–¥–∞–Ω–æ –¥–ª—è –æ–±—Ä–æ–±–∫–∏ JSON –∑ –∑–º—ñ–Ω–Ω–æ—ó –æ—Ç–æ—á–µ–Ω–Ω—è

# üîß –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
# –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –º–æ–∂–Ω–∞ –ø–µ—Ä–µ–¥–∞—Ç–∏ —á–µ—Ä–µ–∑ –∑–º—ñ–Ω–Ω—É –æ—Ç–æ—á–µ–Ω–Ω—è BOT_TOKEN
TELEGRAM_BOT_TOKEN = os.getenv("BOT_TOKEN", "7627926805:AAFCYdWl9Bg8BdV38RpZyL_fkJQt8JNBf7s")
# ID —á–∞—Ç—É –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞, –∫—É–¥–∏ –±—É–¥—É—Ç—å –Ω–∞–¥—Ö–æ–¥–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –Ω–æ–≤—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
ADMIN_CHAT_ID = int(os.getenv("ADMIN_CHAT_ID", "700139501")) # –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—è, —â–æ —Ü–µ –≤–∞—à ID, –ø–µ—Ä–µ—Ç–≤–æ—Ä–µ–Ω–∏–π –Ω–∞ int

# üîå –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ Google Sheets
scope = ['https://spreadsheets.google.com/feeds', 'https://www.googleapis.com/auth/drive']

# –°–ø—Ä–æ–±–∞ –æ—Ç—Ä–∏–º–∞—Ç–∏ –æ–±–ª—ñ–∫–æ–≤—ñ –¥–∞–Ω—ñ –∑ –∑–º—ñ–Ω–Ω–æ—ó –æ—Ç–æ—á–µ–Ω–Ω—è (—Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–æ –¥–ª—è Railway)
creds_json_str = os.getenv("GOOGLE_CREDENTIALS_JSON")
if creds_json_str:
    try:
        creds_info = json.loads(creds_json_str)
        creds = ServiceAccountCredentials.from_json_keyfile_dict(creds_info, scope)
        logging.info("Google Sheet credentials loaded from environment variable.")
    except json.JSONDecodeError as e:
        logging.error(f"Failed to decode GOOGLE_CREDENTIALS_JSON: {e}")
        # –ó–∞–ø–∞—Å–Ω–∏–π –≤–∞—Ä—ñ–∞–Ω—Ç, —è–∫—â–æ –∑–º—ñ–Ω–Ω–∞ –æ—Ç–æ—á–µ–Ω–Ω—è –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–∞
        creds = ServiceAccountCredentials.from_json_keyfile_name('credentials.json', scope)
        logging.warning("Falling back to credentials.json file due to JSON decode error.")
    except Exception as e:
        logging.error(f"Error loading credentials from environment variable: {e}")
        creds = ServiceAccountCredentials.from_json_keyfile_name('credentials.json', scope)
        logging.warning("Falling back to credentials.json file due to general error.")
else:
    # –Ø–∫—â–æ –∑–º—ñ–Ω–Ω–∞ –æ—Ç–æ—á–µ–Ω–Ω—è –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞, —Å–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –∑ —Ñ–∞–π–ª—É
    creds = ServiceAccountCredentials.from_json_keyfile_name('credentials.json', scope)
    logging.info("Google Sheet credentials loaded from credentials.json file.")

gc = gspread.authorize(creds)
# –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—è, —â–æ –Ω–∞–∑–≤–∞ –∞—Ä–∫—É—à–∞ "–û—Ç–≤–µ—Ç—ã –Ω–∞ —Ñ–æ—Ä–º—É" —Ç–æ—á–Ω–æ —Å–ø—ñ–≤–ø–∞–¥–∞—î –∑ –≤–∞—à–æ—é –≤–∫–ª–∞–¥–∫–æ—é –≤ Google Sheets
sheet = gc.open_by_key("1i7BKTUHO4QW9OoUW_0xdE1uKqGCcY3MO_6BjHaVzyFk").worksheet("–û—Ç–≤–µ—Ç—ã –Ω–∞ —Ñ–æ—Ä–º—É")
headers = sheet.row_values(1)  # –ù–∞–∑–≤–∏ –∫–æ–ª–æ–Ω–æ–∫ –∑ –ø–µ—Ä—à–æ–≥–æ —Ä—è–¥–∫–∞ —Ç–∞–±–ª–∏—Ü—ñ
logging.info(f"Google Sheet headers: {headers}")

# üß© –ï—Ç–∞–ø–∏ –∑–±–æ—Ä—É –¥–∞–Ω–∏—Ö
DOCTOR, PHONE, CLINIC, DATETIME, PATIENT, IMPLANT_SYSTEM, ZONE = range(7)

async def start(update: Update, context: CallbackContext) -> int:
    logging.info(f"–û—Ç—Ä–∏–º–∞–Ω–æ –∫–æ–º–∞–Ω–¥—É /start –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {update.effective_user.id}")
    await update.message.reply_text("üë®‚Äç‚öïÔ∏è –í–≤–µ–¥—ñ—Ç—å –ø—Ä—ñ–∑–≤–∏—â–µ –ª—ñ–∫–∞—Ä—è:")
    return DOCTOR

async def doctor(update: Update, context: CallbackContext) -> int:
    logging.info(f"–û—Ç—Ä–∏–º–∞–Ω–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –ª—ñ–∫–∞—Ä—è: {update.message.text}")
    context.user_data["–ü–Ü–ë –ª—ñ–∫–∞—Ä—è"] = update.message.text
    await update.message.reply_text("üìû –í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É:")
    return PHONE

async def phone(update: Update, context: CallbackContext) -> int:
    logging.info(f"–û—Ç—Ä–∏–º–∞–Ω–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å —Ç–µ–ª–µ—Ñ–æ–Ω—É: {update.message.text}")
    context.user_data["–ö–æ–Ω—Ç–∞–∫—Ç–Ω–∏–π —Ç–µ–ª–µ—Ñ–æ–Ω"] = update.message.text
    await update.message.reply_text("üè• –í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –∫–ª—ñ–Ω—ñ–∫–∏:")
    return CLINIC

async def clinic(update: Update, context: CallbackContext) -> int:
    logging.info(f"–û—Ç—Ä–∏–º–∞–Ω–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –∫–ª—ñ–Ω—ñ–∫–∏: {update.message.text}")
    context.user_data["–ù–∞–∑–≤–∞ –∫–ª—ñ–Ω—ñ–∫–∏"] = update.message.text
    await update.message.reply_text("üìÖ –í–≤–µ–¥—ñ—Ç—å –¥–∞—Ç—É –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è (–Ω–∞–ø—Ä. 24.07.2025):")
    return DATETIME

async def datetime_step(update: Update, context: CallbackContext) -> int:
    logging.info(f"–û—Ç—Ä–∏–º–∞–Ω–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –¥–∞—Ç–∏: {update.message.text}")
    context.user_data["–¥–∞—Ç–∞ –∑–¥–∞—á—ñ"] = update.message.text
    await update.message.reply_text("üë§ –í–≤–µ–¥—ñ—Ç—å –ü–Ü–ë –ø–∞—Ü—ñ—î–Ω—Ç–∞:")
    return PATIENT

async def patient(update: Update, context: CallbackContext) -> int:
    logging.info(f"–û—Ç—Ä–∏–º–∞–Ω–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –ü–Ü–ë –ø–∞—Ü—ñ—î–Ω—Ç–∞: {update.message.text}")
    context.user_data["–ü–Ü–ë –ø–∞—Ü—ñ—î–Ω—Ç–∞"] = update.message.text
    await update.message.reply_text("üî© –í–≤–µ–¥—ñ—Ç—å —ñ–º–ø–ª–∞–Ω—Ç–∞—Ü—ñ–π–Ω—É —Å–∏—Å—Ç–µ–º—É:")
    return IMPLANT_SYSTEM

async def implant(update: Update, context: CallbackContext) -> int:
    logging.info(f"–û—Ç—Ä–∏–º–∞–Ω–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å —ñ–º–ø–ª–∞–Ω—Ç–∞—Ü—ñ–π–Ω–æ—ó —Å–∏—Å—Ç–µ–º–∏: {update.message.text}")
    context.user_data["–°–∏—Å—Ç–µ–º–∞ —ñ–º–ø–ª–∞–Ω—Ç–∞—Ç—ñ–≤"] = update.message.text
    await update.message.reply_text("ü¶∑ –í–≤–µ–¥—ñ—Ç—å –∑–æ–Ω—É (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥ 1.1 –∞–±–æ 2.4):")
    return ZONE

async def zone(update: Update, context: CallbackContext) -> int:
    logging.info(f"–û—Ç—Ä–∏–º–∞–Ω–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –∑–æ–Ω–∏: {update.message.text}")
    # –í–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è SyntaxError —Ç–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –¥–æ–≤–≥–æ–≥–æ –∫–ª—é—á–∞
    context.user_data['–ü–µ—Ä–µ–¥–±–∞—á—É–≤–∞–Ω–∞ –∑–æ–Ω–∞ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è —ñ–º–ø–ª–∞–Ω—Ç–∞—Ç—ñ–≤ –í–∫–∞–∂—ñ—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç—ñ "–Ω–æ–º–µ—Ä –∑—É–±–∞ - –¥–∏–∞–º–µ—Ç–µ—Ä/–¥–æ–≤–∂–∏–Ω–∞ —ñ–º–ø–ª–∞–Ω—Ç–∞—Ç–∞"'] = update.message.text
    context.user_data["–°—Ç–∞—Ç—É—Å"] = "–ù–æ–≤–∏–π"
    
    logging.info("–î–∞–Ω—ñ –∑–±–µ—Ä–µ–∂–µ–Ω–æ –≤ context.user_data. –°–ø—Ä–æ–±–∞ –∑–±–µ—Ä–µ–≥—Ç–∏ –≤ Google Sheet.")
    save_to_sheet(context.user_data) # –¶—è —Ñ—É–Ω–∫—Ü—ñ—è –Ω–µ async
    
    logging.info("–°–ø—Ä–æ–±–∞ –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—É.")
    notify_admin(context) # –¶—è —Ñ—É–Ω–∫—Ü—ñ—è –Ω–µ async
    
    await update.message.reply_text("‚úÖ –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–∏–π–Ω—è—Ç–µ. –î—è–∫—É—î–º–æ!")
    logging.info("–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–∏–π–Ω—è—Ç–æ, ConversationHandler.END")
    return ConversationHandler.END

def save_to_sheet(data: dict):
    """
    –§–æ—Ä–º—É—î–º–æ —Ä—è–¥–æ–∫ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ –¥–æ –∑–∞–≥–æ–ª–æ–≤–∫—ñ–≤ –ø–µ—Ä—à–æ–≥–æ —Ä—è–¥–∫–∞ —Ç–∞ –¥–æ–¥–∞—î–º–æ –Ω–æ–≤–∏–π —Ä—è–¥–æ–∫ —É —Ç–∞–±–ª–∏—Ü—é.
    """
    row = [data.get(col, "") for col in headers]
    try:
        sheet.append_row(row)
        logging.info(f"–†—è–¥–æ–∫ —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ –¥–æ Google Sheet: {row}")
    except Exception as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—ñ —Ä—è–¥–∫–∞ –¥–æ Google Sheet: {e}")
        # –î–æ–¥–∞—Ç–∫–æ–≤–æ: –º–æ–∂–Ω–∞ –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—É –ø—Ä–æ –ø–æ–º–∏–ª–∫—É –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è
        # context.bot.send_message(chat_id=ADMIN_CHAT_ID, text=f"–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤ Google Sheet: {e}")

def notify_admin(context: CallbackContext):
    """
    –ù–∞–¥—Å–∏–ª–∞—î–º–æ –∞–¥–º—ñ–Ω—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –Ω–æ–≤–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è.
    –ö–ª—é—á—ñ —Ç—É—Ç –º–∞—é—Ç—å –¢–û–ß–ù–û —Å–ø—ñ–≤–ø–∞–¥–∞—Ç–∏ –∑ –∫–ª—é—á–∞–º–∏ –≤ context.user_data
    """
    data = context.user_data
    msg = (
        "üÜï –ù–û–í–ï –ó–ê–ú–û–í–õ–ï–ù–ù–Ø\n\n"
        f"üë®‚Äç‚öïÔ∏è –ü–Ü–ë –ª—ñ–∫–∞—Ä—è: {data.get('–ü–Ü–ë –ª—ñ–∫–∞—Ä—è', 'N/A')}\n"
        f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {data.get('–ö–æ–Ω—Ç–∞–∫—Ç–Ω–∏–π —Ç–µ–ª–µ—Ñ–æ–Ω', 'N/A')}\n"
        f"üè• –ö–ª—ñ–Ω—ñ–∫–∞: {data.get('–ù–∞–∑–≤–∞ –∫–ª—ñ–Ω—ñ–∫–∏', 'N/A')}\n"
        f"üìÖ –î–∞—Ç–∞ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è: {data.get('–¥–∞—Ç–∞ –∑–¥–∞—á—ñ', 'N/A')}\n"
        f"üë§ –ü–Ü–ë –ø–∞—Ü—ñ—î–Ω—Ç–∞: {data.get('–ü–Ü–ë –ø–∞—Ü—ñ—î–Ω—Ç–∞', 'N/A')}\n"
        f"üî© –°–∏—Å—Ç–µ–º–∞ —ñ–º–ø–ª–∞–Ω—Ç–∞—Ç—ñ–≤: {data.get('–°–∏—Å—Ç–µ–º–∞ —ñ–º–ø–ª–∞–Ω—Ç–∞—Ç—ñ–≤', 'N/A')}\n"
        f"ü¶∑ –ó–æ–Ω–∞: {data.get('–ü–µ—Ä–µ–¥–±–∞—á—É–≤–∞–Ω–∞ –∑–æ–Ω–∞ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è —ñ–º–ø–ª–∞–Ω—Ç–∞—Ç—ñ–≤ –í–∫–∞–∂—ñ—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç—ñ \"–Ω–æ–º–µ—Ä –∑—É–±–∞ - –¥–∏–∞–º–µ—Ç–µ—Ä/–¥–æ–≤–∂–∏–Ω–∞ —ñ–º–ø–ª–∞–Ω—Ç–∞—Ç–∞\"', 'N/A')}\n"
        f"üìå –°—Ç–∞—Ç—É—Å: {data.get('–°—Ç–∞—Ç—É—Å', 'N/A')}"
    )
    try:
        context.bot.send_message(chat_id=ADMIN_CHAT_ID, text=msg)
        logging.info("–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—É —É—Å–ø—ñ—à–Ω–æ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ.")
    except Exception as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—É: {e}")

async def cancel(update: Update, context: CallbackContext) -> int:
    logging.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {update.effective_user.id} —Å–∫–∞—Å—É–≤–∞–≤ –æ–ø–µ—Ä–∞—Ü—ñ—é.")
    await update.message.reply_text("‚ùå –û–ø–µ—Ä–∞—Ü—ñ—é —Å–∫–∞—Å–æ–≤–∞–Ω–æ.")
    return ConversationHandler.END

def main():
    # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è –Ω–∞ DEBUG –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω—ñ—à–æ–≥–æ –≤–∏–≤–æ–¥—É
    logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.DEBUG)

    logging.info("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞—î—Ç—å—Å—è...")
    
    # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è Application
    application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()
    logging.info("Application —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ.")

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            DOCTOR: [MessageHandler(filters.TEXT & ~filters.COMMAND, doctor)],
            PHONE: [MessageHandler(filters.TEXT & ~filters.COMMAND, phone)],
            CLINIC: [MessageHandler(filters.TEXT & ~filters.COMMAND, clinic)],
            DATETIME: [MessageHandler(filters.TEXT & ~filters.COMMAND, datetime_step)],
            PATIENT: [MessageHandler(filters.TEXT & ~filters.COMMAND, patient)],
            IMPLANT_SYSTEM: [MessageHandler(filters.TEXT & ~filters.COMMAND, implant)],
            ZONE: [MessageHandler(filters.TEXT & ~filters.COMMAND, zone)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )

    application.add_handler(conv_handler)
    logging.info("ConversationHandler –¥–æ–¥–∞–Ω–æ –¥–æ Application.")

    logging.info("–ü–æ—á–∏–Ω–∞—î–º–æ –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è –æ–Ω–æ–≤–ª–µ–Ω—å...")
    # allowed_updates=Update.ALL_TYPES –∑–∞–±–µ–∑–ø–µ—á—É—î, —â–æ –±–æ—Ç –æ—Ç—Ä–∏–º—É—î –≤—Å—ñ —Ç–∏–ø–∏ –æ–Ω–æ–≤–ª–µ–Ω—å.
    application.run_polling(allowed_updates=Update.ALL_TYPES)
    logging.info("–û–ø–∏—Ç—É–≤–∞–Ω–Ω—è –æ–Ω–æ–≤–ª–µ–Ω—å –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –ë–æ—Ç –∑—É–ø–∏–Ω–µ–Ω–æ.")

if __name__ == '__main__':
    main()
