#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import os
import logging
from datetime import datetime
from telegram import Update
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    ConversationHandler,
    CallbackContext
)
import gspread
from oauth2client.service_account import ServiceAccountCredentials

# üîß –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
TELEGRAM_BOT_TOKEN = os.getenv("BOT_TOKEN", "7627926805:AAFCYdWl9Bg8BdV38RpZyL_fkJQt8JNBf7s")
ADMIN_CHAT_ID = 700139501  # ID, –∫—É–¥–∏ –Ω–∞–¥—Å–∏–ª–∞—é—Ç—å—Å—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è

# üîå –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ Google Sheets
scope = ['https://spreadsheets.google.com/feeds', 'https://www.googleapis.com/auth/drive']
# –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—è, —â–æ credentials.json –∑–Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è —É —Ç—ñ–π –∂–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó, —â–æ —ñ telegram_bot.py
creds = ServiceAccountCredentials.from_json_keyfile_name('credentials.json', scope)
gc = gspread.authorize(creds)
# –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—è, —â–æ –Ω–∞–∑–≤–∞ –∞—Ä–∫—É—à–∞ "–û—Ç–≤–µ—Ç—ã –Ω–∞ —Ñ–æ—Ä–º—É" —Ç–æ—á–Ω–æ —Å–ø—ñ–≤–ø–∞–¥–∞—î –∑ –≤–∞—à–æ—é –≤–∫–ª–∞–¥–∫–æ—é –≤ Google Sheets
sheet = gc.open_by_key("1i7BKTUHO4QW9OoUW_0xdE1uKqGCcY3MO_6BjHaVzyFk").worksheet("–û—Ç–≤–µ—Ç—ã –Ω–∞ —Ñ–æ—Ä–º—É")
headers = sheet.row_values(1)  # –ù–∞–∑–≤–∏ –∫–æ–ª–æ–Ω–æ–∫ –∑ –ø–µ—Ä—à–æ–≥–æ —Ä—è–¥–∫–∞ —Ç–∞–±–ª–∏—Ü—ñ

# üß© –ï—Ç–∞–ø–∏ –∑–±–æ—Ä—É –¥–∞–Ω–∏—Ö
DOCTOR, PHONE, CLINIC, DATETIME, PATIENT, IMPLANT_SYSTEM, ZONE = range(7)

async def start(update: Update, context: CallbackContext) -> int:
    await update.message.reply_text("üë®‚Äç‚öïÔ∏è –í–≤–µ–¥—ñ—Ç—å –ø—Ä—ñ–∑–≤–∏—â–µ –ª—ñ–∫–∞—Ä—è:")
    return DOCTOR

async def doctor(update: Update, context: CallbackContext) -> int:
    context.user_data["–ü–Ü–ë –ª—ñ–∫–∞—Ä—è"] = update.message.text
    await update.message.reply_text("üìû –í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É:")
    return PHONE

async def phone(update: Update, context: CallbackContext) -> int:
    context.user_data["–ö–æ–Ω—Ç–∞–∫—Ç–Ω–∏–π —Ç–µ–ª–µ—Ñ–æ–Ω"] = update.message.text
    await update.message.reply_text("üè• –í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –∫–ª—ñ–Ω—ñ–∫–∏:")
    return CLINIC

async def clinic(update: Update, context: CallbackContext) -> int:
    context.user_data["–ù–∞–∑–≤–∞ –∫–ª—ñ–Ω—ñ–∫–∏"] = update.message.text
    await update.message.reply_text("üìÖ –í–≤–µ–¥—ñ—Ç—å –¥–∞—Ç—É –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è (–Ω–∞–ø—Ä. 24.07.2025):")
    return DATETIME

async def datetime_step(update: Update, context: CallbackContext) -> int:
    context.user_data["–¥–∞—Ç–∞ –∑–¥–∞—á—ñ"] = update.message.text # –ö–ª—é—á –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –¥–∞—Ç–∏
    await update.message.reply_text("üë§ –í–≤–µ–¥—ñ—Ç—å –ü–Ü–ë –ø–∞—Ü—ñ—î–Ω—Ç–∞:")
    return PATIENT

async def patient(update: Update, context: CallbackContext) -> int:
    context.user_data["–ü–Ü–ë –ø–∞—Ü—ñ—î–Ω—Ç–∞"] = update.message.text # –í–∏–ø—Ä–∞–≤–ª–µ–Ω–æ: –±—É–ª–æ "–ü–Ü–ë –ª—ñ–∫–∞—Ä—è"
    await update.message.reply_text("üî© –í–≤–µ–¥—ñ—Ç—å —ñ–º–ø–ª–∞–Ω—Ç–∞—Ü—ñ–π–Ω—É —Å–∏—Å—Ç–µ–º—É:")
    return IMPLANT_SYSTEM

async def implant(update: Update, context: CallbackContext) -> int:
    context.user_data["–°–∏—Å—Ç–µ–º–∞ —ñ–º–ø–ª–∞–Ω—Ç–∞—Ç—ñ–≤"] = update.message.text # –ö–ª—é—á –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Å–∏—Å—Ç–µ–º–∏
    await update.message.reply_text("ü¶∑ –í–≤–µ–¥—ñ—Ç—å –∑–æ–Ω—É (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥ 1.1 –∞–±–æ 2.4):")
    return ZONE

async def zone(update: Update, context: CallbackContext) -> int:
    # –í–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è SyntaxError:
    context.user_data['–ü–µ—Ä–µ–¥–±–∞—á—É–≤–∞–Ω–∞ –∑–æ–Ω–∞ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è —ñ–º–ø–ª–∞–Ω—Ç–∞—Ç—ñ–≤ –í–∫–∞–∂—ñ—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç—ñ "–Ω–æ–º–µ—Ä –∑—É–±–∞ - –¥–∏–∞–º–µ—Ç–µ—Ä/–¥–æ–≤–∂–∏–Ω–∞ —ñ–º–ø–ª–∞–Ω—Ç–∞—Ç–∞"'] = update.message.text
    context.user_data["–°—Ç–∞—Ç—É—Å"] = "–ù–æ–≤–∏–π"
    save_to_sheet(context.user_data) # –ú–æ–∂–µ –±—É—Ç–∏ async, –∞–ª–µ –∑–∞–ª–∏—à–∏–º–æ —Ç–∞–∫ –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç–∏
    notify_admin(context) # –ú–æ–∂–µ –±—É—Ç–∏ async, –∞–ª–µ –∑–∞–ª–∏—à–∏–º–æ —Ç–∞–∫ –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç–∏
    await update.message.reply_text("‚úÖ –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–∏–π–Ω—è—Ç–µ. –î—è–∫—É—î–º–æ!")
    return ConversationHandler.END

def save_to_sheet(data: dict):
    """
    –§–æ—Ä–º—É—î–º–æ —Ä—è–¥–æ–∫ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ –¥–æ –∑–∞–≥–æ–ª–æ–≤–∫—ñ–≤ –ø–µ—Ä—à–æ–≥–æ —Ä—è–¥–∫–∞ —Ç–∞ –¥–æ–¥–∞—î–º–æ –Ω–æ–≤–∏–π —Ä—è–¥–æ–∫ —É —Ç–∞–±–ª–∏—Ü—é.
    """
    row = [data.get(col, "") for col in headers]
    sheet.append_row(row)

def notify_admin(context: CallbackContext):
    """
    –ù–∞–¥—Å–∏–ª–∞—î–º–æ –∞–¥–º—ñ–Ω—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –Ω–æ–≤–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è.
    –ö–ª—é—á—ñ —Ç—É—Ç –º–∞—é—Ç—å –¢–û–ß–ù–û —Å–ø—ñ–≤–ø–∞–¥–∞—Ç–∏ –∑ –∫–ª—é—á–∞–º–∏ –≤ context.user_data
    """
    data = context.user_data
    msg = (
        "üÜï –ù–û–í–ï –ó–ê–ú–û–í–õ–ï–ù–ù–Ø\n\n"
        f"üìÖ –î–∞—Ç–∞: {data.get('–¥–∞—Ç–∞ –∑–¥–∞—á—ñ', 'N/A')}\n" # –í–∏–ø—Ä–∞–≤–ª–µ–Ω–æ: '–î–∞—Ç–∞' –Ω–∞ '–¥–∞—Ç–∞ –∑–¥–∞—á—ñ'
        f"üè• –ö–ª—ñ–Ω—ñ–∫–∞: {data.get('–ù–∞–∑–≤–∞ –∫–ª—ñ–Ω—ñ–∫–∏', 'N/A')}\n" # –í–∏–ø—Ä–∞–≤–ª–µ–Ω–æ: '–ö–ª—ñ–Ω—ñ–∫–∞' –Ω–∞ '–ù–∞–∑–≤–∞ –∫–ª—ñ–Ω—ñ–∫–∏'
        f"üë§ –ü–∞—Ü—ñ—î–Ω—Ç: {data.get('–ü–Ü–ë –ø–∞—Ü—ñ—î–Ω—Ç–∞', 'N/A')}\n"
        f"üî© –°–∏—Å—Ç–µ–º–∞: {data.get('–°–∏—Å—Ç–µ–º–∞ —ñ–º–ø–ª–∞–Ω—Ç–∞—Ç—ñ–≤', 'N/A')}\n" # –í–∏–ø—Ä–∞–≤–ª–µ–Ω–æ: '–°–∏—Å—Ç–µ–º–∞' –Ω–∞ '–°–∏—Å—Ç–µ–º–∞ —ñ–º–ø–ª–∞–Ω—Ç–∞—Ç—ñ–≤'
        f"ü¶∑ –ó–æ–Ω–∞: {data.get('–ü–µ—Ä–µ–¥–±–∞—á—É–≤–∞–Ω–∞ –∑–æ–Ω–∞ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è —ñ–º–ø–ª–∞–Ω—Ç–∞—Ç—ñ–≤ –í–∫–∞–∂—ñ—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç—ñ \"–Ω–æ–º–µ—Ä –∑—É–±–∞ - –¥–∏–∞–º–µ—Ç–µ—Ä/–¥–æ–≤–∂–∏–Ω–∞ —ñ–º–ø–ª–∞–Ω—Ç–∞—Ç–∞\"', 'N/A')}\n" # –í–∏–ø—Ä–∞–≤–ª–µ–Ω–æ –∫–ª—é—á
        f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {data.get('–ö–æ–Ω—Ç–∞–∫—Ç–Ω–∏–π —Ç–µ–ª–µ—Ñ–æ–Ω', 'N/A')}\n" # –í–∏–ø—Ä–∞–≤–ª–µ–Ω–æ: '–¢–µ–ª–µ—Ñ–æ–Ω' –Ω–∞ '–ö–æ–Ω—Ç–∞–∫—Ç–Ω–∏–π —Ç–µ–ª–µ—Ñ–æ–Ω'
        f"üìå –°—Ç–∞—Ç—É—Å: {data.get('–°—Ç–∞—Ç—É—Å', 'N/A')}"
    )
    context.bot.send_message(chat_id=ADMIN_CHAT_ID, text=msg)

async def cancel(update: Update, context: CallbackContext) -> int:
    await update.message.reply_text("‚ùå –û–ø–µ—Ä–∞—Ü—ñ—é —Å–∫–∞—Å–æ–≤–∞–Ω–æ.")
    return ConversationHandler.END

def main():
    logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)

    # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è Application (Application –∑–∞–º—ñ–Ω—é—î Updater —Ç–∞ Dispatcher)
    application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            DOCTOR: [MessageHandler(filters.TEXT & ~filters.COMMAND, doctor)],
            PHONE: [MessageHandler(filters.TEXT & ~filters.COMMAND, phone)],
            CLINIC: [MessageHandler(filters.TEXT & ~filters.COMMAND, clinic)],
            DATETIME: [MessageHandler(filters.TEXT & ~filters.COMMAND, datetime_step)],
            PATIENT: [MessageHandler(filters.TEXT & ~filters.COMMAND, patient)],
            IMPLANT_SYSTEM: [MessageHandler(filters.TEXT & ~filters.COMMAND, implant)],
            ZONE: [MessageHandler(filters.TEXT & ~filters.COMMAND, zone)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )

    # –î–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫ –¥–æ application
    application.add_handler(conv_handler)

    # –ó–∞–ø—É—Å–∫–∞—î–º–æ –±–æ—Ç–∞
    application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == '__main__':
    main()
