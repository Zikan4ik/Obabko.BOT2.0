#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import os
import logging
import asyncio
from datetime import datetime
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    filters,
    ConversationHandler,
    CallbackContext
)
import gspread
from oauth2client.service_account import ServiceAccountCredentials
import json
import re
from typing import Optional, Dict, Any

# üîß –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
TELEGRAM_BOT_TOKEN = os.getenv("BOT_TOKEN", "7627926805:AAFCYdWl9Bg8BdV38RpZyL_fkJQt8JNBf7s")
ADMIN_CHAT_ID = int(os.getenv("ADMIN_CHAT_ID", "700139501"))
SPREADSHEET_ID = "1i7BKTUHO4QW9OoUW_0xdE1uKqGCcY3MO_6BjHaVzyFk"
WORKSHEET_ID = 1024616098  # ID –≤–∫–ª–∞–¥–∫–∏ –∑ URL

# üéØ –î–æ–¥–∞—Ç–∫–æ–≤—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
MAX_MESSAGE_LENGTH = 4000  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ –¥–æ–≤–∂–∏–Ω–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
ADMIN_USERNAME = os.getenv("ADMIN_USERNAME", "@admin")  # Username –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –∫–æ–Ω—Ç–∞–∫—Ç—ñ–≤

# üîå –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ Google Sheets
scope = ['https://spreadsheets.google.com/feeds', 'https://www.googleapis.com/auth/drive']

def setup_google_sheets():
    """–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ Google Sheets –∑ –æ–±—Ä–æ–±–∫–æ—é –ø–æ–º–∏–ª–æ–∫"""
    try:
        creds_json_str = os.getenv("GOOGLE_CREDENTIALS_JSON")
        if creds_json_str:
            try:
                creds_info = json.loads(creds_json_str)
                creds = ServiceAccountCredentials.from_json_keyfile_dict(creds_info, scope)
                logging.info("Google Sheet credentials –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ –∑—ñ –∑–º—ñ–Ω–Ω–æ—ó –æ—Ç–æ—á–µ–Ω–Ω—è.")
            except json.JSONDecodeError as e:
                logging.error(f"–ü–æ–º–∏–ª–∫–∞ –¥–µ–∫–æ–¥—É–≤–∞–Ω–Ω—è GOOGLE_CREDENTIALS_JSON: {e}")
                creds = ServiceAccountCredentials.from_json_keyfile_name('credentials.json', scope)
                logging.warning("–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è —Ñ–∞–π–ª credentials.json —á–µ—Ä–µ–∑ –ø–æ–º–∏–ª–∫—É JSON.")
        else:
            creds = ServiceAccountCredentials.from_json_keyfile_name('credentials.json', scope)
            logging.info("Google Sheet credentials –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ –∑ —Ñ–∞–π–ª—É credentials.json.")
        
        gc = gspread.authorize(creds)
        
        # –í—ñ–¥–∫—Ä–∏–≤–∞—î–º–æ —Ç–∞–±–ª–∏—Ü—é –ø–æ ID
        spreadsheet = gc.open_by_key(SPREADSHEET_ID)
        
        # –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ—Ç—Ä—ñ–±–Ω—É –≤–∫–ª–∞–¥–∫—É –ø–æ ID
        try:
            worksheet = spreadsheet.get_worksheet_by_id(WORKSHEET_ID)
        except gspread.WorksheetNotFound:
            # –Ø–∫—â–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞ –ø–æ ID, –ø—Ä–æ–±—É—î–º–æ –ø–æ —ñ–º–µ–Ω—ñ
            worksheet = spreadsheet.worksheet("–û—Ç–≤–µ—Ç—ã –Ω–∞ —Ñ–æ—Ä–º—É")
        
        # –û—Ç—Ä–∏–º—É—î–º–æ –∑–∞–≥–æ–ª–æ–≤–∫–∏
        headers = worksheet.row_values(1) if worksheet.row_count > 0 else []
        
        logging.info(f"–ü—ñ–¥–∫–ª—é—á–µ–Ω–∞ Google –¢–∞–±–ª–∏—Ü—è. –ó–∞–≥–æ–ª–æ–≤–∫–∏: {headers}")
        return worksheet, headers
    
    except Exception as e:
        logging.error(f"–ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ Google Sheets: {e}")
        return None, []

# –ì–ª–æ–±–∞–ª—å–Ω—ñ –∑–º—ñ–Ω–Ω—ñ
WORKSHEET, HEADERS = setup_google_sheets()

# üß© –ï—Ç–∞–ø–∏ —Ä–æ–∑–º–æ–≤–∏
DOCTOR, PHONE, CLINIC, DATETIME, PATIENT, IMPLANT_SYSTEM, ZONE, MAIN_MENU, CHAT_MODE = range(9)

# üìä –í—ñ–¥–ø–æ–≤—ñ–¥–Ω—ñ—Å—Ç—å –ø–æ–ª—ñ–≤ –±–æ—Ç–∞ —ñ —Ç–∞–±–ª–∏—Ü—ñ
FIELD_MAPPING = {
    "timestamp": "–í—Ä–µ–º–µ–Ω–Ω–∞—è –º–µ—Ç–∫–∞",
    "doctor": "–ü–Ü–ë –ª—ñ–∫–∞—Ä—è", 
    "phone": "–ö–æ–Ω—Ç–∞–∫—Ç–Ω–∏–π —Ç–µ–ª–µ—Ñ–æ–Ω",
    "clinic": "–ù–∞–∑–≤–∞ –∫–ª—ñ–Ω—ñ–∫–∏",
    "date": "–¥–∞—Ç–∞ –∑–¥–∞—á—ñ",
    "patient": "–ü–Ü–ë –ø–∞—Ü—ñ—î–Ω—Ç–∞",
    "implant_system": "–°–∏—Å—Ç–µ–º–∞ —ñ–º–ø–ª–∞–Ω—Ç–∞—Ç—ñ–≤",
    "zone": "–ü–µ—Ä–µ–¥–±–∞—á—É–≤–∞–Ω–∞ –∑–æ–Ω–∞ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è —ñ–º–ø–ª–∞–Ω—Ç–∞—Ç—ñ–≤ –í–∫–∞–∂—ñ—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç—ñ \"–Ω–æ–º–µ—Ä –∑—É–±–∞ - –¥–∏–∞–º–µ—Ç–µ—Ä/–¥–æ–≤–∂–∏–Ω–∞ —ñ–º–ø–ª–∞–Ω—Ç–∞—Ç–∞\"",
    "status": "–°—Ç–∞—Ç—É—Å"
}

# üîç –§—É–Ω–∫—Ü—ñ—ó –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó
def validate_phone(phone: str) -> bool:
    """–í–∞–ª—ñ–¥–∞—Ü—ñ—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω—É (—É–∫—Ä–∞—ó–Ω—Å—å–∫–∏–π —Ñ–æ—Ä–º–∞—Ç)"""
    cleaned = re.sub(r'[\s\-\(\)]', '', phone)
    pattern = r'^(\+38)?[0-9]{10}$'
    return bool(re.match(pattern, cleaned))

def validate_date(date_str: str) -> bool:
    """–í–∞–ª—ñ–¥–∞—Ü—ñ—è –¥–∞—Ç–∏ —É —Ñ–æ—Ä–º–∞—Ç—ñ DD.MM.YYYY"""
    pattern = r'^\d{2}\.\d{2}\.\d{4}$'
    if not re.match(pattern, date_str):
        return False
    
    try:
        datetime.strptime(date_str, '%d.%m.%Y')
        return True
    except ValueError:
        return False

def validate_zone(zone: str) -> bool:
    """–í–∞–ª—ñ–¥–∞—Ü—ñ—è –∑–æ–Ω–∏ —ñ–º–ø–ª–∞–Ω—Ç–∞—Ü—ñ—ó"""
    if not zone.strip():
        return False
    # –ë—ñ–ª—å—à –≥–Ω—É—á–∫–∞ –≤–∞–ª—ñ–¥–∞—Ü—ñ—è - –ø—Ä–∏–π–º–∞—î–º–æ –±—É–¥—å-—è–∫–∏–π –Ω–µ–ø–æ—Ä–æ–∂–Ω—ñ–π —Ç–µ–∫—Å—Ç
    return len(zone.strip()) >= 2

# üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é
def get_main_menu_keyboard():
    """–°—Ç–≤–æ—Ä—é—î –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
    keyboard = [
        [InlineKeyboardButton("üìù –ù–æ–≤–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è", callback_data="new_order")],
        [InlineKeyboardButton("üí¨ –ß–∞—Ç –∑ –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é", callback_data="chat_support")],
        [InlineKeyboardButton("‚ÑπÔ∏è –î–æ–≤—ñ–¥–∫–∞", callback_data="help")],
    ]
    return InlineKeyboardMarkup(keyboard)

async def show_main_menu(update: Update, context: CallbackContext):
    """–ü–æ–∫–∞–∑—É—î –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é"""
    menu_text = (
        "üè• **–°–∏—Å—Ç–µ–º–∞ –∑–∞–º–æ–≤–ª–µ–Ω—å —ñ–º–ø–ª–∞–Ω—Ç–∞—Ç—ñ–≤**\n\n"
        "–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:"
    )
    
    keyboard = get_main_menu_keyboard()
    
    if update.callback_query:
        await update.callback_query.edit_message_text(
            menu_text, 
            parse_mode='Markdown',
            reply_markup=keyboard
        )
    else:
        await update.message.reply_text(
            menu_text,
            parse_mode='Markdown', 
            reply_markup=keyboard
        )
    
    return MAIN_MENU

# üìù –û–±—Ä–æ–±–Ω–∏–∫–∏ –∫–æ–º–∞–Ω–¥
async def start(update: Update, context: CallbackContext) -> int:
    """–ü–æ—á–∞—Ç–∫–æ–≤–∞ –∫–æ–º–∞–Ω–¥–∞"""
    user_id = update.effective_user.id
    username = update.effective_user.username or "–ù–µ–≤—ñ–¥–æ–º–æ"
    first_name = update.effective_user.first_name or ""
    
    logging.info(f"–ö–æ–º–∞–Ω–¥–∞ /start –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id} (@{username})")
    
    welcome_text = (
        f"üëã –í—ñ—Ç–∞—î–º–æ, {first_name}!\n\n"
        "üè• **–°–∏—Å—Ç–µ–º–∞ –∑–∞–º–æ–≤–ª–µ–Ω—å —ñ–º–ø–ª–∞–Ω—Ç–∞—Ç—ñ–≤**\n\n"
        "–Ø –¥–æ–ø–æ–º–æ–∂—É –≤–∞–º:\n"
        "‚Ä¢ –û—Ñ–æ—Ä–º–∏—Ç–∏ –Ω–æ–≤–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è\n"
        "‚Ä¢ –ó–≤'—è–∑–∞—Ç–∏—Å—è –∑ –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é\n"
        "‚Ä¢ –û—Ç—Ä–∏–º–∞—Ç–∏ –¥–æ–≤—ñ–¥–∫–æ–≤—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é\n\n"
        "–û–±–µ—Ä—ñ—Ç—å –ø–æ—Ç—Ä—ñ–±–Ω—É –¥—ñ—é:"
    )
    
    keyboard = get_main_menu_keyboard()
    await update.message.reply_text(
        welcome_text,
        parse_mode='Markdown',
        reply_markup=keyboard
    )
    
    return MAIN_MENU

async def menu_callback(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–æ–±–Ω–∏–∫ –Ω–∞—Ç–∏—Å–∫–∞–Ω—å –∫–Ω–æ–ø–æ–∫ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
    query = update.callback_query
    await query.answer()
    
    if query.data == "new_order":
        await query.edit_message_text(
            "üë®‚Äç‚öïÔ∏è **–ü–æ—á–∏–Ω–∞—î–º–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è**\n\n"
            "–í–≤–µ–¥—ñ—Ç—å **–ø—Ä—ñ–∑–≤–∏—â–µ –ª—ñ–∫–∞—Ä—è**:",
            parse_mode='Markdown'
        )
        return DOCTOR
        
    elif query.data == "chat_support":
        await query.edit_message_text(
            "üí¨ **–†–µ–∂–∏–º —á–∞—Ç—É –∑ –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é**\n\n"
            "–¢–µ–ø–µ—Ä –≤–∏ –º–æ–∂–µ—Ç–µ –ø–∏—Å–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, —ñ –≤–æ–Ω–∏ –±—É–¥—É—Ç—å –ø–µ—Ä–µ–¥–∞–Ω—ñ –≤ —Å–ª—É–∂–±—É –ø—ñ–¥—Ç—Ä–∏–º–∫–∏.\n"
            "–î–ª—è –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –≤ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ /menu\n\n"
            "–ù–∞–ø–∏—à—ñ—Ç—å –≤–∞—à–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:",
            parse_mode='Markdown'
        )
        return CHAT_MODE
        
    elif query.data == "help":
        help_text = (
            "üÜò **–î–æ–≤—ñ–¥–∫–∞ –ø–æ –±–æ—Ç—É**\n\n"
            "**–ö–æ–º–∞–Ω–¥–∏:**\n"
            "‚Ä¢ `/start` - –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é\n"
            "‚Ä¢ `/menu` - –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –≤ –º–µ–Ω—é\n"
            "‚Ä¢ `/cancel` - –°–∫–∞—Å—É–≤–∞—Ç–∏ –æ–ø–µ—Ä–∞—Ü—ñ—é\n\n"
            "**–ü—Ä–æ—Ü–µ—Å –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:**\n"
            "1Ô∏è‚É£ –ü—Ä—ñ–∑–≤–∏—â–µ –ª—ñ–∫–∞—Ä—è\n"
            "2Ô∏è‚É£ –ö–æ–Ω—Ç–∞–∫—Ç–Ω–∏–π —Ç–µ–ª–µ—Ñ–æ–Ω\n"
            "3Ô∏è‚É£ –ù–∞–∑–≤–∞ –∫–ª—ñ–Ω—ñ–∫–∏\n"
            "4Ô∏è‚É£ –î–∞—Ç–∞ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è\n"
            "5Ô∏è‚É£ –ü–Ü–ë –ø–∞—Ü—ñ—î–Ω—Ç–∞\n" 
            "6Ô∏è‚É£ –°–∏—Å—Ç–µ–º–∞ —ñ–º–ø–ª–∞–Ω—Ç–∞—Ç—ñ–≤\n"
            "7Ô∏è‚É£ –ó–æ–Ω–∞ —ñ–º–ø–ª–∞–Ω—Ç–∞—Ü—ñ—ó\n\n"
            f"**–ü—ñ–¥—Ç—Ä–∏–º–∫–∞:** {ADMIN_USERNAME}"
        )
        
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu")]]
        await query.edit_message_text(
            help_text,
            parse_mode='Markdown',
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        return MAIN_MENU
        
    elif query.data == "back_to_menu":
        return await show_main_menu(update, context)

# üí¨ –ß–∞—Ç –∑ –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é
async def chat_handler(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–æ–±–Ω–∏–∫ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å —É —Ä–µ–∂–∏–º—ñ —á–∞—Ç—É"""
    user_message = update.message.text
    user_id = update.effective_user.id
    username = update.effective_user.username or "–ù–µ–≤—ñ–¥–æ–º–æ"
    first_name = update.effective_user.first_name or ""
    
    # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É
    admin_msg = (
        "üí¨ **–ü–û–í–Ü–î–û–ú–õ–ï–ù–ù–Ø –í–Ü–î –ö–û–†–ò–°–¢–£–í–ê–ß–ê**\n\n"
        f"üë§ **–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á:** {first_name} (@{username})\n"
        f"üÜî **ID:** `{user_id}`\n"
        f"‚è∞ **–ß–∞—Å:** {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}\n\n"
        f"üìù **–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:**\n{user_message}"
    )
    
    try:
        await context.bot.send_message(
            chat_id=ADMIN_CHAT_ID,
            text=admin_msg,
            parse_mode='Markdown'
        )
        
        await update.message.reply_text(
            "‚úÖ –í–∞—à–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —Å–ª—É–∂–±—É –ø—ñ–¥—Ç—Ä–∏–º–∫–∏!\n"
            "–ú–∏ –∑–≤'—è–∂–µ–º–æ—Å—è –∑ –≤–∞–º–∏ –Ω–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º.\n\n"
            "–í–∏ –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ –ø–∏—Å–∞—Ç–∏ –∞–±–æ –ø–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –≤ /menu"
        )
        
    except Exception as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—É: {e}")
        await update.message.reply_text(
            "‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.\n"
            "–ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ –∞–±–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ /menu"
        )
    
    return CHAT_MODE

# üìù –û–±—Ä–æ–±–Ω–∏–∫–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
async def doctor_handler(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–æ–±–Ω–∏–∫ –≤–≤–µ–¥–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –ª—ñ–∫–∞—Ä—è"""
    doctor_name = update.message.text.strip()
    
    if len(doctor_name) < 2:
        await update.message.reply_text(
            "‚ùå –ü—Ä—ñ–∑–≤–∏—â–µ –ª—ñ–∫–∞—Ä—è –∑–∞–Ω–∞–¥—Ç–æ –∫–æ—Ä–æ—Ç–∫–µ.\n"
            "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–µ –ø—Ä—ñ–∑–≤–∏—â–µ:"
        )
        return DOCTOR
    
    context.user_data["doctor"] = doctor_name
    logging.info(f"–û—Ç—Ä–∏–º–∞–Ω–æ —ñ–º'—è –ª—ñ–∫–∞—Ä—è: {doctor_name}")
    
    await update.message.reply_text(
        "üìû –í–≤–µ–¥—ñ—Ç—å **–∫–æ–Ω—Ç–∞–∫—Ç–Ω–∏–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É**:\n"
        "_(–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: +380501234567 –∞–±–æ 0501234567)_",
        parse_mode='Markdown'
    )
    return PHONE

async def phone_handler(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–æ–±–Ω–∏–∫ –≤–≤–µ–¥–µ–Ω–Ω—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω—É"""
    phone = update.message.text.strip()
    
    if not validate_phone(phone):
        await update.message.reply_text(
            "‚ùå –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω—É.\n"
            "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä —É —Ñ–æ—Ä–º–∞—Ç—ñ:\n"
            "‚Ä¢ +380501234567\n"
            "‚Ä¢ 0501234567"
        )
        return PHONE
    
    context.user_data["phone"] = phone
    logging.info(f"–û—Ç—Ä–∏–º–∞–Ω–æ —Ç–µ–ª–µ—Ñ–æ–Ω: {phone}")
    
    await update.message.reply_text(
        "üè• –í–≤–µ–¥—ñ—Ç—å **–Ω–∞–∑–≤—É –∫–ª—ñ–Ω—ñ–∫–∏**:",
        parse_mode='Markdown'
    )
    return CLINIC

async def clinic_handler(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–æ–±–Ω–∏–∫ –≤–≤–µ–¥–µ–Ω–Ω—è –Ω–∞–∑–≤–∏ –∫–ª—ñ–Ω—ñ–∫–∏"""
    clinic_name = update.message.text.strip()
    
    if len(clinic_name) < 3:
        await update.message.reply_text(
            "‚ùå –ù–∞–∑–≤–∞ –∫–ª—ñ–Ω—ñ–∫–∏ –∑–∞–Ω–∞–¥—Ç–æ –∫–æ—Ä–æ—Ç–∫–∞.\n"
            "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –ø–æ–≤–Ω—É –Ω–∞–∑–≤—É:"
        )
        return CLINIC
    
    context.user_data["clinic"] = clinic_name
    logging.info(f"–û—Ç—Ä–∏–º–∞–Ω–æ –Ω–∞–∑–≤—É –∫–ª—ñ–Ω—ñ–∫–∏: {clinic_name}")
    
    await update.message.reply_text(
        "üìÖ –í–≤–µ–¥—ñ—Ç—å **–¥–∞—Ç—É –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è** —É —Ñ–æ—Ä–º–∞—Ç—ñ –î–î.–ú–ú.–†–†–†–†:\n"
        "_(–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: 24.12.2024)_",
        parse_mode='Markdown'
    )
    return DATETIME

async def datetime_handler(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–æ–±–Ω–∏–∫ –≤–≤–µ–¥–µ–Ω–Ω—è –¥–∞—Ç–∏"""
    date_str = update.message.text.strip()
    
    if not validate_date(date_str):
        await update.message.reply_text(
            "‚ùå –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç–∏.\n"
            "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –¥–∞—Ç—É —É —Ñ–æ—Ä–º–∞—Ç—ñ **–î–î.–ú–ú.–†–†–†–†**\n"
            "–ù–∞–ø—Ä–∏–∫–ª–∞–¥: 24.12.2024",
            parse_mode='Markdown'
        )
        return DATETIME
    
    context.user_data["date"] = date_str
    logging.info(f"–û—Ç—Ä–∏–º–∞–Ω–æ –¥–∞—Ç—É: {date_str}")
    
    await update.message.reply_text(
        "üë§ –í–≤–µ–¥—ñ—Ç—å **–ü–Ü–ë –ø–∞—Ü—ñ—î–Ω—Ç–∞**:",
        parse_mode='Markdown'
    )
    return PATIENT

async def patient_handler(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–æ–±–Ω–∏–∫ –≤–≤–µ–¥–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –ø–∞—Ü—ñ—î–Ω—Ç–∞"""
    patient_name = update.message.text.strip()
    
    if len(patient_name) < 5:
        await update.message.reply_text(
            "‚ùå –ü–Ü–ë –ø–∞—Ü—ñ—î–Ω—Ç–∞ –∑–∞–Ω–∞–¥—Ç–æ –∫–æ—Ä–æ—Ç–∫–µ.\n"
            "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –ø–æ–≤–Ω–µ –ü–Ü–ë:"
        )
        return PATIENT
    
    context.user_data["patient"] = patient_name
    logging.info(f"–û—Ç—Ä–∏–º–∞–Ω–æ –ü–Ü–ë –ø–∞—Ü—ñ—î–Ω—Ç–∞: {patient_name}")
    
    await update.message.reply_text(
        "üî© –í–≤–µ–¥—ñ—Ç—å **—Å–∏—Å—Ç–µ–º—É —ñ–º–ø–ª–∞–Ω—Ç–∞—Ç—ñ–≤**:",
        parse_mode='Markdown'
    )
    return IMPLANT_SYSTEM

async def implant_handler(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–æ–±–Ω–∏–∫ –≤–≤–µ–¥–µ–Ω–Ω—è —Å–∏—Å—Ç–µ–º–∏ —ñ–º–ø–ª–∞–Ω—Ç–∞—Ç—ñ–≤"""
    implant_system = update.message.text.strip()
    
    if len(implant_system) < 3:
        await update.message.reply_text(
            "‚ùå –ù–∞–∑–≤–∞ —Å–∏—Å—Ç–µ–º–∏ –∑–∞–Ω–∞–¥—Ç–æ –∫–æ—Ä–æ—Ç–∫–∞.\n"
            "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –ø–æ–≤–Ω—É –Ω–∞–∑–≤—É:"
        )
        return IMPLANT_SYSTEM
    
    context.user_data["implant_system"] = implant_system
    logging.info(f"–û—Ç—Ä–∏–º–∞–Ω–æ —Å–∏—Å—Ç–µ–º—É —ñ–º–ø–ª–∞–Ω—Ç–∞—Ç—ñ–≤: {implant_system}")
    
    await update.message.reply_text(
        "ü¶∑ –í–≤–µ–¥—ñ—Ç—å **–∑–æ–Ω—É —ñ–º–ø–ª–∞–Ω—Ç–∞—Ü—ñ—ó**:\n"
        "_(–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: 1.1 –∞–±–æ 2.4 - 4.2x10 –∞–±–æ –±—É–¥—å-—è–∫–∏–π –æ–ø–∏—Å)_",
        parse_mode='Markdown'
    )
    return ZONE

async def zone_handler(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–æ–±–Ω–∏–∫ –≤–≤–µ–¥–µ–Ω–Ω—è –∑–æ–Ω–∏ —ñ–º–ø–ª–∞–Ω—Ç–∞—Ü—ñ—ó"""
    zone = update.message.text.strip()
    
    if not validate_zone(zone):
        await update.message.reply_text(
            "‚ùå –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –∑–æ–Ω—É —ñ–º–ø–ª–∞–Ω—Ç–∞—Ü—ñ—ó:"
        )
        return ZONE
    
    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ user_id –¥–ª—è —Å–ø–æ–≤—ñ—â–µ–Ω—å
    context.user_data["user_id"] = update.effective_user.id
    context.user_data["zone"] = zone
    context.user_data["status"] = "–ù–æ–≤–∏–π"
    context.user_data["timestamp"] = datetime.now().strftime("%d.%m.%Y %H:%M:%S")
    
    logging.info(f"–û—Ç—Ä–∏–º–∞–Ω–æ –∑–æ–Ω—É: {zone}")
    logging.info("–í—Å—ñ –¥–∞–Ω—ñ –∑—ñ–±—Ä–∞–Ω–æ. –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è...")
    
    # –ü–æ–∫–∞–∑—É—î–º–æ –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É –¥–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è
    await show_order_summary(update, context)
    
    # –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤ Google Sheets
    success = await save_to_sheet_async(context.user_data)
    
    if success:
        # –°–ø–æ–≤—ñ—â–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        await notify_admin_async(context)
        
        keyboard = [[InlineKeyboardButton("üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="back_to_menu")]]
        await update.message.reply_text(
            "‚úÖ **–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ –ø—Ä–∏–π–Ω—è—Ç–æ —ñ –∑–±–µ—Ä–µ–∂–µ–Ω–æ!**\n\n"
            "–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä –æ—Ç—Ä–∏–º–∞–≤ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è —ñ –∑–≤'—è–∂–µ—Ç—å—Å—è –∑ –≤–∞–º–∏.",
            parse_mode='Markdown',
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    else:
        keyboard = [[InlineKeyboardButton("üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="back_to_menu")]]
        await update.message.reply_text(
            "‚ö†Ô∏è **–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–∏–π–Ω—è—Ç–æ, –∞–ª–µ –≤–∏–Ω–∏–∫–ª–∞ –ø—Ä–æ–±–ª–µ–º–∞ –∑—ñ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è–º.**\n"
            "–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä –±—É–≤ —Å–ø–æ–≤—ñ—â–µ–Ω–∏–π.",
            parse_mode='Markdown',
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    
    return MAIN_MENU

async def show_order_summary(update: Update, context: CallbackContext):
    """–ü–æ–∫–∞–∑—É—î –∑–≤–µ–¥–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è"""
    data = context.user_data
    summary = (
        "üìã **–ó–≤–µ–¥–µ–Ω–Ω—è –≤–∞—à–æ–≥–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:**\n\n"
        f"üë®‚Äç‚öïÔ∏è **–õ—ñ–∫–∞—Ä:** {data.get('doctor', 'N/A')}\n"
        f"üìû **–¢–µ–ª–µ—Ñ–æ–Ω:** {data.get('phone', 'N/A')}\n"
        f"üè• **–ö–ª—ñ–Ω—ñ–∫–∞:** {data.get('clinic', 'N/A')}\n"
        f"üìÖ **–î–∞—Ç–∞:** {data.get('date', 'N/A')}\n"
        f"üë§ **–ü–∞—Ü—ñ—î–Ω—Ç:** {data.get('patient', 'N/A')}\n"
        f"üî© **–°–∏—Å—Ç–µ–º–∞:** {data.get('implant_system', 'N/A')}\n"
        f"ü¶∑ **–ó–æ–Ω–∞:** {data.get('zone', 'N/A')}\n"
        f"‚è∞ **–ß–∞—Å —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è:** {data.get('timestamp', 'N/A')}"
    )
    
    await update.message.reply_text(summary, parse_mode='Markdown')

# üíæ –†–æ–±–æ—Ç–∞ –∑ Google Sheets
async def save_to_sheet_async(data: Dict[str, Any]) -> bool:
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–µ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤ Google Sheets"""
    if not WORKSHEET or not HEADERS:
        logging.error("Google Sheet –Ω–µ –ø—ñ–¥–∫–ª—é—á–µ–Ω–∏–π")
        return False
    
    try:
        loop = asyncio.get_event_loop()
        await loop.run_in_executor(None, save_to_sheet_sync, data)
        return True
    except Exception as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤ Google Sheet: {e}")
        return False

def save_to_sheet_sync(data: Dict[str, Any]):
    """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–µ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤ Google Sheets"""
    try:
        # –°—Ç–≤–æ—Ä—é—î–º–æ —Ä—è–¥–æ–∫ –¥–∞–Ω–∏—Ö –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ –¥–æ –∑–∞–≥–æ–ª–æ–≤–∫—ñ–≤ —Ç–∞–±–ª–∏—Ü—ñ
        row = []
        
        for header in HEADERS:
            value = ""
            # –®—É–∫–∞—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—ñ—Å—Ç—å –º—ñ–∂ –∑–∞–≥–æ–ª–æ–≤–∫–æ–º —Ç–∞–±–ª–∏—Ü—ñ —ñ –ø–æ–ª—è–º–∏ –±–æ—Ç–∞
            for field_key, header_key in FIELD_MAPPING.items():
                if header.strip() == header_key.strip():
                    value = data.get(field_key, "")
                    break
            
            # –Ø–∫—â–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –ø—Ä—è–º–æ—ó –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ—Å—Ç—ñ, –ø—Ä–æ–±—É—î–º–æ –∑–Ω–∞–π—Ç–∏ —á–∞—Å—Ç–∫–æ–≤—É
            if not value and header:
                for field_key, field_value in data.items():
                    if field_key.lower() in header.lower() or header.lower() in field_key.lower():
                        value = field_value
                        break
            
            row.append(str(value))
        
        # –î–æ–¥–∞—î–º–æ —Ä—è–¥–æ–∫ –≤ —Ç–∞–±–ª–∏—Ü—é
        WORKSHEET.append_row(row)
        logging.info(f"–†—è–¥–æ–∫ –¥–æ–¥–∞–Ω–æ –≤ Google Sheet: {row}")
        
    except Exception as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å—ñ –≤ Google Sheet: {e}")
        raise

# üìß –°–ø–æ–≤—ñ—â–µ–Ω–Ω—è
async def notify_admin_async(context: CallbackContext):
    """–°–ø–æ–≤—ñ—â–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –ø—Ä–æ –Ω–æ–≤–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è"""
    try:
        data = context.user_data
        # –û—Ç—Ä–∏–º—É—î–º–æ user_id –∑ –µ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        user_id = data.get('user_id', 'N/A')
        
        msg = (
            "üÜï **–ù–û–í–ï –ó–ê–ú–û–í–õ–ï–ù–ù–Ø –Ü–ú–ü–õ–ê–ù–¢–ê–¢–ê**\n\n"
            f"üë®‚Äç‚öïÔ∏è **–õ—ñ–∫–∞—Ä:** {data.get('doctor', 'N/A')}\n"
            f"üìû **–¢–µ–ª–µ—Ñ–æ–Ω:** {data.get('phone', 'N/A')}\n"
            f"üè• **–ö–ª—ñ–Ω—ñ–∫–∞:** {data.get('clinic', 'N/A')}\n"
            f"üìÖ **–î–∞—Ç–∞ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:** {data.get('date', 'N/A')}\n"
            f"üë§ **–ü–∞—Ü—ñ—î–Ω—Ç:** {data.get('patient', 'N/A')}\n"
            f"üî© **–°–∏—Å—Ç–µ–º–∞:** {data.get('implant_system', 'N/A')}\n"
            f"ü¶∑ **–ó–æ–Ω–∞:** {data.get('zone', 'N/A')}\n"
            f"üìå **–°—Ç–∞—Ç—É—Å:** {data.get('status', 'N/A')}\n"
            f"‚è∞ **–ß–∞—Å:** {data.get('timestamp', 'N/A')}\n"
            f"üÜî **User ID:** `{user_id}`"
        )
        
        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –∞–¥–º—ñ–Ω–∞
        admin_keyboard = [
            [InlineKeyboardButton("‚úÖ –ü—Ä–∏–π–Ω—è—Ç–∏", callback_data=f"accept_{user_id}")],
            [InlineKeyboardButton("‚ùå –í—ñ–¥—Ö–∏–ª–∏—Ç–∏", callback_data=f"reject_{user_id}")],
            [InlineKeyboardButton("üí¨ –í—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏", callback_data=f"reply_{user_id}")],
        ]
        
        await context.bot.send_message(
            chat_id=ADMIN_CHAT_ID,
            text=msg,
            parse_mode='Markdown',
            reply_markup=InlineKeyboardMarkup(admin_keyboard)
        )
        
        logging.info("–°–ø–æ–≤—ñ—â–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ")
        
    except Exception as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–Ω—è —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É: {e}")

# üë• –§—É–Ω–∫—Ü—ñ—ó –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
async def admin_callback_handler(update: Update, context: CallbackContext):
    """–û–±—Ä–æ–±–Ω–∏–∫ –¥—ñ–π –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    query = update.callback_query
    await query.answer()
    
    if query.from_user.id != ADMIN_CHAT_ID:
        await query.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –ø—Ä–∞–≤", show_alert=True)
        return
    
    action, user_id = query.data.split("_", 1)
    
    if action == "accept":
        await query.edit_message_reply_markup(
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("‚úÖ –ü–†–ò–ô–ù–Ø–¢–û", callback_data="accepted")
            ]])
        )
        
        try:
            await context.bot.send_message(
                chat_id=int(user_id),
                text="‚úÖ **–í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–∏–π–Ω—è—Ç–æ!**\n\n–ú–∏ —Ä–æ–∑–ø–æ—á–∞–ª–∏ –æ–±—Ä–æ–±–∫—É –≤–∞—à–æ–≥–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è.",
                parse_mode='Markdown'
            )
        except:
            logging.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {user_id}")
    
    elif action == "reject":
        await query.edit_message_reply_markup(
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("‚ùå –í–Ü–î–•–ò–õ–ï–ù–û", callback_data="rejected")
            ]])
        )
        
        try:
            await context.bot.send_message(
                chat_id=int(user_id),
                text="‚ùå **–í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –≤—ñ–¥—Ö–∏–ª–µ–Ω–æ**\n\n–ó–≤'—è–∂—ñ—Ç—å—Å—è –∑ –Ω–∞–º–∏ –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–Ω—è –¥–µ—Ç–∞–ª–µ–π.",
                parse_mode='Markdown'
            )
        except:
            logging.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {user_id}")
    
    elif action == "reply":
        # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —Ä–µ–∂–∏–º –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        context.chat_data['admin_reply_to'] = user_id
        await query.message.reply_text(
            f"üí¨ –í–≤–µ–¥—ñ—Ç—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id}:"
        )

async def admin_message_handler(update: Update, context: CallbackContext):
    """–û–±—Ä–æ–±–Ω–∏–∫ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    if update.effective_user.id != ADMIN_CHAT_ID:
        return
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î –∞–¥–º—ñ–Ω –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
    reply_to = context.chat_data.get('admin_reply_to')
    if reply_to:
        try:
            admin_message = update.message.text
            await context.bot.send_message(
                chat_id=int(reply_to),
                text=f"üì© **–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞:**\n\n{admin_message}",
                parse_mode='Markdown'
            )
            
            await update.message.reply_text(
                f"‚úÖ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {reply_to}"
            )
            
            # –°–∫–∏–¥–∞—î–º–æ —Ä–µ–∂–∏–º –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
            context.chat_data.pop('admin_reply_to', None)
            
        except Exception as e:
            await update.message.reply_text(
                f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {e}"
            )
            context.chat_data.pop('admin_reply_to', None)

# üîÑ –°–ª—É–∂–±–æ–≤—ñ –∫–æ–º–∞–Ω–¥–∏
async def menu_command(update: Update, context: CallbackContext) -> int:
    """–ö–æ–º–∞–Ω–¥–∞ –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –≤ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é"""
    return await show_main_menu(update, context)

async def cancel_handler(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–æ–±–Ω–∏–∫ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è"""
    keyboard = [[InlineKeyboardButton("üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="back_to_menu")]]
    
    await update.message.reply_text(
        "‚ùå **–û–ø–µ—Ä–∞—Ü—ñ—é —Å–∫–∞—Å–æ–≤–∞–Ω–æ**",
        parse_mode='Markdown',
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    
    return MAIN_MENU

async def error_handler(update: object, context: CallbackContext):
    """–ì–ª–æ–±–∞–ª—å–Ω–∏–π –æ–±—Ä–æ–±–Ω–∏–∫ –ø–æ–º–∏–ª–æ–∫"""
    logging.error(f"Exception: {context.error}")
    
    if isinstance(update, Update) and update.effective_message:
        await update.effective_message.reply_text(
            "‚ö†Ô∏è –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞. –í–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ /start –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫—É."
        )

def main():
    """–û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è"""
    # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
    logging.basicConfig(
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
        level=logging.INFO,
        handlers=[
            logging.FileHandler('bot.log', encoding='utf-8'),
            logging.StreamHandler()
        ]
    )
    
    if not WORKSHEET:
        logging.error("–ù–µ –≤–¥–∞–ª–æ—Å—è –ø—ñ–¥–∫–ª—é—á–∏—Ç–∏—Å—è –¥–æ Google Sheets!")
        return
    
    logging.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    
    # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø—Ä–æ–≥—Ä–∞–º–∏
    application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()
    
    # ConversationHandler –¥–ª—è –∑–∞–º–æ–≤–ª–µ–Ω—å
    conv_handler = ConversationHandler(
        entry_points=[
            CommandHandler("start", start),
            CallbackQueryHandler(menu_callback, pattern="^(new_order|chat_support|help|back_to_menu)$")
        ],
        states={
            MAIN_MENU: [
                CallbackQueryHandler(menu_callback, pattern="^(new_order|chat_support|help|back_to_menu)$")
            ],
            DOCTOR: [MessageHandler(filters.TEXT & ~filters.COMMAND, doctor_handler)],
            PHONE: [MessageHandler(filters.TEXT & ~filters.COMMAND, phone_handler)],
            CLINIC: [MessageHandler(filters.TEXT & ~filters.COMMAND, clinic_handler)],
            DATETIME: [MessageHandler(filters.TEXT & ~filters.COMMAND, datetime_handler)],
            PATIENT: [MessageHandler(filters.TEXT & ~filters.COMMAND, patient_handler)],
            IMPLANT_SYSTEM: [MessageHandler(filters.TEXT & ~filters.COMMAND, implant_handler)],
            ZONE: [MessageHandler(filters.TEXT & ~filters.COMMAND, zone_handler)],
            CHAT_MODE: [MessageHandler(filters.TEXT & ~filters.COMMAND, chat_handler)],
        },
        fallbacks=[
            CommandHandler("cancel", cancel_handler),
            CommandHandler("menu", menu_command),
            CommandHandler("start", start),
        ],
        per_message=False,
    )
    
    # –î–æ–¥–∞–≤–∞–Ω–Ω—è –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤
    application.add_handler(conv_handler)
    application.add_handler(CommandHandler("menu", menu_command))
    application.add_handler(CallbackQueryHandler(admin_callback_handler, pattern="^(accept_|reject_|reply_)"))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, admin_message_handler))
    application.add_error_handler(error_handler)
    
    logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ. –ü–æ—á–∏–Ω–∞—é polling...")
    
    # –ó–∞–ø—É—Å–∫
    try:
        application.run_polling(allowed_updates=Update.ALL_TYPES)
    except KeyboardInterrupt:
        logging.info("–û—Ç—Ä–∏–º–∞–Ω–æ —Å–∏–≥–Ω–∞–ª –∑—É–ø–∏–Ω–∫–∏")
    except Exception as e:
        logging.error(f"–ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {e}")
    finally:
        logging.info("–ë–æ—Ç –∑—É–ø–∏–Ω–µ–Ω–æ")

if __name__ == '__main__':
    main()
