#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import os
import logging
import asyncio
from datetime import datetime
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    filters,
    ConversationHandler,
    CallbackContext
)
import gspread
from oauth2client.service_account import ServiceAccountCredentials
import json
import re
from typing import Optional, Dict, Any

# üîß –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
TELEGRAM_BOT_TOKEN = os.getenv("BOT_TOKEN", "7627926805:AAFCYdWl9Bg8BdV38RpZyL_fkJQt8JNBf7s")
ADMIN_CHAT_ID = int(os.getenv("ADMIN_CHAT_ID", "700139501"))
SPREADSHEET_ID = "1i7BKTUHO4QW9OoUW_0xdE1uKqGCcY3MO_6BjHaVzyFk"
WORKSHEET_ID = 1024616098  # ID –≤–∫–ª–∞–¥–∫–∏ –∑ URL

# üéØ –î–æ–¥–∞—Ç–∫–æ–≤—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
MAX_MESSAGE_LENGTH = 4000
ADMIN_USERNAME = os.getenv("ADMIN_USERNAME", "@vlasenko_b")
WEBSITE_URL = "https://www.obabkolab.com.ua/"

# üîå –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ Google Sheets
scope = ['https://spreadsheets.google.com/feeds', 'https://www.googleapis.com/auth/drive']

def setup_google_sheets():
    """–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ Google Sheets –∑ –æ–±—Ä–æ–±–∫–æ—é –ø–æ–º–∏–ª–æ–∫"""
    try:
        creds_json_str = os.getenv("GOOGLE_CREDENTIALS_JSON")
        if creds_json_str:
            try:
                creds_info = json.loads(creds_json_str)
                creds = ServiceAccountCredentials.from_json_keyfile_dict(creds_info, scope)
                logging.info("Google Sheet credentials –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ –∑—ñ –∑–º—ñ–Ω–Ω–æ—ó –æ—Ç–æ—á–µ–Ω–Ω—è.")
            except json.JSONDecodeError as e:
                logging.error(f"–ü–æ–º–∏–ª–∫–∞ –¥–µ–∫–æ–¥—É–≤–∞–Ω–Ω—è GOOGLE_CREDENTIALS_JSON: {e}")
                creds = ServiceAccountCredentials.from_json_keyfile_name('credentials.json', scope)
                logging.warning("–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è —Ñ–∞–π–ª credentials.json —á–µ—Ä–µ–∑ –ø–æ–º–∏–ª–∫—É JSON.")
        else:
            creds = ServiceAccountCredentials.from_json_keyfile_name('credentials.json', scope)
            logging.info("Google Sheet credentials –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ –∑ —Ñ–∞–π–ª—É credentials.json.")

        gc = gspread.authorize(creds)
        spreadsheet = gc.open_by_key(SPREADSHEET_ID)
        
        try:
            worksheet = spreadsheet.get_worksheet_by_id(WORKSHEET_ID)
        except gspread.WorksheetNotFound:
            worksheet = spreadsheet.worksheet("–û—Ç–≤–µ—Ç—ã –Ω–∞ —Ñ–æ—Ä–º—É")

        headers = worksheet.row_values(1) if worksheet.row_count > 0 else []
        
        logging.info(f"–ü—ñ–¥–∫–ª—é—á–µ–Ω–∞ Google –¢–∞–±–ª–∏—Ü—è. –ó–∞–≥–æ–ª–æ–≤–∫–∏: {headers}")
        return worksheet, headers
    
    except Exception as e:
        logging.error(f"–ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ Google Sheets: {e}")
        return None, []

# –ì–ª–æ–±–∞–ª—å–Ω—ñ –∑–º—ñ–Ω–Ω—ñ
WORKSHEET, HEADERS = setup_google_sheets()

# üß© –ï—Ç–∞–ø–∏ —Ä–æ–∑–º–æ–≤–∏
DOCTOR, PHONE, CLINIC, DATETIME, PATIENT, IMPLANT_SYSTEM, ZONE, MAIN_MENU, CHAT_MODE, FILES_MODE = range(10)

# ‚úÖ –ù–û–í–ê –£–î–û–°–ö–û–ù–ê–õ–ï–ù–ê –§–£–ù–ö–¶–Ü–Ø –ó–ë–ï–†–ï–ñ–ï–ù–ù–Ø –í GOOGLE SHEETS
def save_to_sheet(user_data):
    """–ó–∞–ø–∏—Å—É—î –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ —Ç–∞–±–ª–∏—Ü—é Google Sheets –∑ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏–º –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è–º –∫–æ–ª–æ–Ω–æ–∫"""
    try:
        if not WORKSHEET:
            logging.error("WORKSHEET is not initialized. Cannot write to Google Sheet.")
            return False
        
        # –û—Ç—Ä–∏–º—É—î–º–æ –≤—Å—ñ —ñ—Å–Ω—É—é—á—ñ –¥–∞–Ω—ñ —Ç–∞ –∑–∞–≥–æ–ª–æ–≤–∫–∏
        all_values = WORKSHEET.get_all_values()
        headers = all_values[0] if len(all_values) > 0 else []
        next_row = len(all_values) + 1
        
        logging.info(f"üìã –ó–∞–≥–æ–ª–æ–≤–∫–∏ —Ç–∞–±–ª–∏—Ü—ñ: {headers}")
        logging.info(f"üìù –ó–∞–ø–∏—Å—É—î–º–æ –≤ —Ä—è–¥–æ–∫: {next_row}")
        
        # –°–ø–∏—Å–æ–∫ –æ–Ω–æ–≤–ª–µ–Ω—å –¥–ª—è batch –∑–∞–ø–∏—Ç—É
        updates = []
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ –º–∞–ø–ø—ñ–Ω–≥ –¥–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        user_mapping = {
            'doctor': user_data.get('doctor', ''),
            'phone': user_data.get('phone', ''),
            'clinic': user_data.get('clinic', ''),
            'date': user_data.get('date', ''),
            'patient': user_data.get('patient', ''),
            'implant_system': user_data.get('implant_system', ''),
            'zone': user_data.get('zone', ''),
        }
        
        # –ü—Ä–æ—Ö–æ–¥–∏–º–æ –ø–æ –≤—Å—ñ—Ö –∑–∞–≥–æ–ª–æ–≤–∫–∞—Ö —Ç–∞ —à—É–∫–∞—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ—Å—Ç—ñ
        for col_index, header in enumerate(headers):
            if not header.strip():  # –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ –ø—É—Å—Ç—ñ –∑–∞–≥–æ–ª–æ–≤–∫–∏
                continue
                
            header_lower = header.lower().strip()
            column_letter = chr(65 + col_index)  # A, B, C, etc.
            value_to_insert = ""
            
            # –ü–Ü–ë –ª—ñ–∫–∞—Ä—è - —Ç–æ—á–Ω–µ —Å–ø—ñ–≤–ø–∞–¥—ñ–Ω–Ω—è –∑ —Ç–∞–±–ª–∏—Ü–µ—é
            if header.strip() == "–ü–Ü–ë –ª—ñ–∫–∞—Ä—è":
                value_to_insert = user_mapping['doctor']
                logging.info(f"üè• –õ—ñ–∫–∞—Ä '{value_to_insert}' -> –∫–æ–ª–æ–Ω–∫–∞ {column_letter} ({header})")
            
            # –ö–æ–Ω—Ç–∞–∫—Ç–Ω–∏–π —Ç–µ–ª–µ—Ñ–æ–Ω - —Ç–æ—á–Ω–µ —Å–ø—ñ–≤–ø–∞–¥—ñ–Ω–Ω—è
            elif header.strip() == "–ö–æ–Ω—Ç–∞–∫—Ç–Ω–∏–π —Ç–µ–ª–µ—Ñ–æ–Ω":
                value_to_insert = user_mapping['phone']
                logging.info(f"üìû –¢–µ–ª–µ—Ñ–æ–Ω '{value_to_insert}' -> –∫–æ–ª–æ–Ω–∫–∞ {column_letter} ({header})")
            
            # –ù–∞–∑–≤–∞ –∫–ª—ñ–Ω—ñ–∫–∏ - —Ç–æ—á–Ω–µ —Å–ø—ñ–≤–ø–∞–¥—ñ–Ω–Ω—è
            elif header.strip() == "–ù–∞–∑–≤–∞ –∫–ª—ñ–Ω—ñ–∫–∏":
                value_to_insert = user_mapping['clinic']
                logging.info(f"üè• –ö–ª—ñ–Ω—ñ–∫–∞ '{value_to_insert}' -> –∫–æ–ª–æ–Ω–∫–∞ {column_letter} ({header})")
            
            # –î–∞—Ç–∞ –∑–¥–∞—á—ñ - —Ç–æ—á–Ω–µ —Å–ø—ñ–≤–ø–∞–¥—ñ–Ω–Ω—è
            elif "–¥–∞—Ç–∞ –∑–¥–∞—á—ñ" in header_lower:
                value_to_insert = user_mapping['date']
                logging.info(f"üìÖ –î–∞—Ç–∞ '{value_to_insert}' -> –∫–æ–ª–æ–Ω–∫–∞ {column_letter} ({header})")
            
            # –ü–Ü–ë –ø–∞—Ü—ñ—î–Ω—Ç–∞ - —Ç–æ—á–Ω–µ —Å–ø—ñ–≤–ø–∞–¥—ñ–Ω–Ω—è
            elif header.strip() == "–ü–Ü–ë –ø–∞—Ü—ñ—î–Ω—Ç–∞":
                value_to_insert = user_mapping['patient']
                logging.info(f"üë§ –ü–∞—Ü—ñ—î–Ω—Ç '{value_to_insert}' -> –∫–æ–ª–æ–Ω–∫–∞ {column_letter} ({header})")
            
            # –°–∏—Å—Ç–µ–º–∞ —ñ–º–ø–ª–∞–Ω—Ç–∞—Ç—ñ–≤ - —Ç–æ—á–Ω–µ —Å–ø—ñ–≤–ø–∞–¥—ñ–Ω–Ω—è
            elif header.strip() == "–°–∏—Å—Ç–µ–º–∞ —ñ–º–ø–ª–∞–Ω—Ç–∞—Ç—ñ–≤":
                value_to_insert = user_mapping['implant_system']
                logging.info(f"üî© –°–∏—Å—Ç–µ–º–∞ '{value_to_insert}' -> –∫–æ–ª–æ–Ω–∫–∞ {column_letter} ({header})")
            
            # –ü–µ—Ä–µ–¥–±–∞—á—É–≤–∞–Ω–∞ –∑–æ–Ω–∞ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è —ñ–º–ø–ª–∞–Ω—Ç–∞—Ç—ñ–≤ - —Ç–æ—á–Ω–µ —Å–ø—ñ–≤–ø–∞–¥—ñ–Ω–Ω—è –∑ –¥–æ–≤–≥–∏–º –∑–∞–≥–æ–ª–æ–≤–∫–æ–º
            elif "–ø–µ—Ä–µ–¥–±–∞—á—É–≤–∞–Ω–∞ –∑–æ–Ω–∞ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è —ñ–º–ø–ª–∞–Ω—Ç–∞—Ç—ñ–≤" in header_lower:
                value_to_insert = user_mapping['zone']
                logging.info(f"ü¶∑ –ó–æ–Ω–∞ '{value_to_insert}' -> –∫–æ–ª–æ–Ω–∫–∞ {column_letter} ({header})")
            
            # –Ø–∫—â–æ –∑–Ω–∞–π—à–ª–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—ñ—Å—Ç—å, –¥–æ–¥–∞—î–º–æ –¥–æ —Å–ø–∏—Å–∫—É –æ–Ω–æ–≤–ª–µ–Ω—å
            if value_to_insert:
                updates.append({
                    'range': f'{column_letter}{next_row}',
                    'values': [[str(value_to_insert)]]
                })
        
        # –í–∏–∫–æ–Ω—É—î–º–æ batch –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
        if updates:
            for update in updates:
                WORKSHEET.update(update['range'], update['values'], value_input_option='USER_ENTERED')
            
            logging.info(f"‚úÖ –£—Å–ø—ñ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω–æ {len(updates)} –ø–æ–ª—ñ–≤ —É —Ä—è–¥–æ–∫ {next_row}")
            logging.info(f"üìä –û–Ω–æ–≤–ª–µ–Ω—ñ –¥–∞–Ω—ñ: {[update['values'][0][0] for update in updates]}")
            return True
        else:
            logging.warning("‚ö†Ô∏è –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∂–æ–¥–Ω–æ—ó –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ—Å—Ç—ñ –∫–æ–ª–æ–Ω–æ–∫!")
            # –Ø–∫—â–æ –Ω–µ –∑–Ω–∞–π—à–ª–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ—Å—Ç–µ–π, —Å–ø—Ä–æ–±—É—î–º–æ –∑–∞–ø–∏—Å–∞—Ç–∏ –≤ –ø–µ—Ä—à—É –ø–æ—Ä–æ–∂–Ω—é –∫–æ–ª–æ–Ω–∫—É
            fallback_data = [
                user_mapping['doctor'],
                user_mapping['phone'], 
                user_mapping['clinic'],
                user_mapping['date'],
                user_mapping['patient'],
                user_mapping['implant_system'],
                user_mapping['zone']
            ]
            WORKSHEET.append_row(fallback_data, value_input_option='USER_ENTERED')
            logging.info("üìù –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–æ fallback –º–µ—Ç–æ–¥ - –¥–æ–¥–∞–Ω–æ —Ä—è–¥–æ–∫ –≤ –∫—ñ–Ω–µ—Ü—å")
            return True
        
    except Exception as e:
        logging.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å—ñ –≤ Google Sheet: {e}")
        return False

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ —Ç–∞–±–ª–∏—Ü—ñ (–¥–æ–ø–æ–º—ñ–∂–Ω–∞)
def analyze_sheet_structure():
    """–ê–Ω–∞–ª—ñ–∑—É—î —Ç–∞ –≤–∏–≤–æ–¥–∏—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ñ –¥–ª—è –Ω–∞–ª–∞–≥–æ–¥–∂–µ–Ω–Ω—è"""
    try:
        if not WORKSHEET:
            logging.error("WORKSHEET is not initialized.")
            return
        
        headers = WORKSHEET.row_values(1)
        logging.info("\n" + "="*60)
        logging.info("üìä –°–¢–†–£–ö–¢–£–†–ê –¢–ê–ë–õ–ò–¶–Ü:")
        logging.info("="*60)
        
        for index, header in enumerate(headers):
            column_letter = chr(65 + index)  # A, B, C, etc.
            logging.info(f"–ö–æ–ª–æ–Ω–∫–∞ {column_letter} (–ø–æ–∑–∏—Ü—ñ—è {index + 1}): '{header}'")
        
        logging.info("="*60)
        return headers
        
    except Exception as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ –∞–Ω–∞–ª—ñ–∑—É —Å—Ç—Ä—É–∫—Ç—É—Ä–∏: {e}")
        return []

# üîç –§—É–Ω–∫—Ü—ñ—ó –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó - –û–¢–ö–õ–Æ–ß–ï–ù–´ –í–°–ï –§–ò–õ–¨–¢–†–´!
def validate_phone(phone: str) -> bool:
    """–û—Ç–∫–ª—é—á–µ–Ω–∞ –≤–∞–ª–∏–¥–∞—Ü–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞ - –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –õ–Æ–ë–û–ô —Ç–µ–∫—Å—Ç"""
    return True  # –ü—Ä–∏–Ω–∏–º–∞–µ–º –ª—é–±–æ–π —Ç–µ–∫—Å—Ç

def validate_date(date_str: str) -> bool:
    """–û—Ç–∫–ª—é—á–µ–Ω–∞ –≤–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞—Ç—ã - –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –õ–Æ–ë–û–ô —Ç–µ–∫—Å—Ç"""
    return True  # –ü—Ä–∏–Ω–∏–º–∞–µ–º –ª—é–±–æ–π —Ç–µ–∫—Å—Ç

def validate_zone(zone: str) -> bool:
    """–û—Ç–∫–ª—é—á–µ–Ω–∞ –≤–∞–ª–∏–¥–∞—Ü–∏—è –∑–æ–Ω—ã - –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –õ–Æ–ë–û–ô —Ç–µ–∫—Å—Ç"""
    return True  # –ü—Ä–∏–Ω–∏–º–∞–µ–º –ª—é–±–æ–π —Ç–µ–∫—Å—Ç

# üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é
def get_main_menu_keyboard():
    """–°—Ç–≤–æ—Ä—é—î –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é –∑ –æ–Ω–æ–≤–ª–µ–Ω–∏–º–∏ –ø—É–Ω–∫—Ç–∞–º–∏"""
    keyboard = [
        [InlineKeyboardButton("üìù –ù–æ–≤–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è", callback_data="new_order")],
        [InlineKeyboardButton("üí¨ –ß–∞—Ç –∑ –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é", callback_data="chat_support"),
         InlineKeyboardButton("üí∞ –ü—Ä–∞–π—Å", callback_data="price")],
        [InlineKeyboardButton("üåê –°–∞–π—Ç", callback_data="website"),
         InlineKeyboardButton("üìÅ –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ —Ñ–∞–π–ª", callback_data="send_files")],
        [InlineKeyboardButton("‚ÑπÔ∏è –î–æ–≤—ñ–¥–∫–∞", callback_data="help")]
    ]
    return InlineKeyboardMarkup(keyboard)

async def show_main_menu(update: Update, context: CallbackContext):
    """–ü–æ–∫–∞–∑—É—î –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é –∑ –∫—Ä–∞—Å–∏–≤–∏–º –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è–º"""
    menu_text = (
        "üè• <b>–°–∏—Å—Ç–µ–º–∞ –∑–∞–º–æ–≤–ª–µ–Ω—å —ñ–º–ø–ª–∞–Ω—Ç–∞—Ç—ñ–≤</b>\n\n"
        "üîπ <b>–ù–æ–≤–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è</b> - –æ—Ñ–æ—Ä–º–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–∞ —Ö—ñ—Ä—É—Ä–≥—ñ—á–Ω–∏–π —à–∞–±–ª–æ–Ω\n"
        "üîπ <b>–ß–∞—Ç –∑ –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é</b> - –∑–≤'—è–∑–∞—Ç–∏—Å—è –∑ –Ω–∞—à–∏–º–∏ —Å–ø–µ—Ü—ñ–∞–ª—ñ—Å—Ç–∞–º–∏\n" 
        "üîπ <b>–ü—Ä–∞–π—Å</b> - –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –∞–∫—Ç—É–∞–ª—å–Ω—ñ —Ü—ñ–Ω–∏\n"
        "üîπ <b>–°–∞–π—Ç</b> - –≤—ñ–¥–≤—ñ–¥–∞—Ç–∏ –Ω–∞—à –æ—Ñ—ñ—Ü—ñ–π–Ω–∏–π —Å–∞–π—Ç\n"
        "üîπ <b>–ù–∞–¥—ñ—Å–ª–∞—Ç–∏ —Ñ–∞–π–ª</b> - –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∏ —á–∏ —Ñ–æ—Ç–æ\n"
        "üîπ <b>–î–æ–≤—ñ–¥–∫–∞</b> - –¥–æ–ø–æ–º–æ–≥–∞ –ø–æ —Ä–æ–±–æ—Ç—ñ –∑ –±–æ—Ç–æ–º\n\n"
        "üëÜ <i>–û–±–µ—Ä—ñ—Ç—å –ø–æ—Ç—Ä—ñ–±–Ω—É –¥—ñ—é:</i>"
    )
    
    keyboard = get_main_menu_keyboard()
    
    if update.callback_query:
        await update.callback_query.edit_message_text(
            menu_text, 
            parse_mode='HTML',
            reply_markup=keyboard
        )
    else:
        await update.message.reply_text(
            menu_text,
            parse_mode='HTML', 
            reply_markup=keyboard
        )
    
    return MAIN_MENU

# üìù –û–±—Ä–æ–±–Ω–∏–∫–∏ –∫–æ–º–∞–Ω–¥
async def start(update: Update, context: CallbackContext) -> int:
    """–ü–æ—á–∞—Ç–∫–æ–≤–∞ –∫–æ–º–∞–Ω–¥–∞"""
    user = update.effective_user
    first_name = user.first_name or ""
    
    welcome_text = (
        f"üëã <b>–í—ñ—Ç–∞—î–º–æ, {first_name}!</b>\n\n"
        "üè• <b>–°–∏—Å—Ç–µ–º–∞ –∑–∞–º–æ–≤–ª–µ–Ω—å –•—ñ—Ä—É—Ä–≥—ñ—á–Ω–∏—Ö —à–∞–±–ª–æ–Ω—ñ–≤</b>\n\n"
        "üéØ –ó–∞ –¥–æ–ø–æ–º–æ–≥–æ—é —Ü—å–æ–≥–æ –±–æ—Ç–∞ –≤–∏ –º–æ–∂–µ—Ç–µ:\n"
        "‚Ä¢ –û—Ñ–æ—Ä–º–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–∞ —ñ–º–ø–ª–∞–Ω—Ç–∞—Ç–∏\n"
        "‚Ä¢ –ó–≤'—è–∑–∞—Ç–∏—Å—è –∑ –Ω–∞—à–æ—é –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é\n"
        "‚Ä¢ –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –ø—Ä–∞–π—Å-–ª–∏—Å—Ç\n"
        "‚Ä¢ –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ —Ñ–∞–π–ª–∏\n\n"
        "üëÜ <i>–û–±–µ—Ä—ñ—Ç—å –ø–æ—Ç—Ä—ñ–±–Ω—É –¥—ñ—é:</i>"
    )
    
    keyboard = get_main_menu_keyboard()
    await update.message.reply_text(
        welcome_text,
        parse_mode='HTML',
        reply_markup=keyboard
    )
    
    return MAIN_MENU

async def menu_callback(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–æ–±–Ω–∏–∫ –Ω–∞—Ç–∏—Å–∫–∞–Ω—å –∫–Ω–æ–ø–æ–∫ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
    query = update.callback_query
    await query.answer()
    
    if query.data == "new_order":
        await query.edit_message_text(
            "üë®‚Äç‚öïÔ∏è <b>–ü–æ—á–∏–Ω–∞—î–º–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è</b>\n\n"
            "üìù –í–≤–µ–¥—ñ—Ç—å <b>–ü–Ü–ë –ª—ñ–∫–∞—Ä—è</b>:",
            parse_mode='HTML'
        )
        return DOCTOR
        
    elif query.data == "chat_support":
        support_text = (
            "üí¨ <b>–ß–∞—Ç –∑ –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é</b>\n\n"
            "‚úâÔ∏è –ù–∞–ø–∏—à—ñ—Ç—å –≤–∞—à–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, —ñ –º–∏ –ø–µ—Ä–µ–¥–∞–º–æ –π–æ–≥–æ —Å–ø–µ—Ü—ñ–∞–ª—ñ—Å—Ç—É.\n"
            "üìû –í–∏ –æ—Ç—Ä–∏–º–∞—î—Ç–µ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º.\n\n"
            "üí° <i>–î–ª—è –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –≤ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ /menu</i>"
        )
        await query.edit_message_text(
            support_text,
            parse_mode='HTML'
        )
        return CHAT_MODE
        
    elif query.data == "send_files":
        files_text = (
            "üìÅ <b>–ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è —Ñ–∞–π–ª—ñ–≤</b>\n\n"
            "üì§ –ù–∞–¥—ñ—à–ª—ñ—Ç—å —Ñ–∞–π–ª–∏ (—Ñ–æ—Ç–æ, –¥–æ–∫—É–º–µ–Ω—Ç–∏, —Å–∫–∞–Ω–∏) –æ–¥–Ω–∏–º –∞–±–æ –¥–µ–∫—ñ–ª—å–∫–æ–º–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º–∏.\n"
            "üîÑ –ú–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –ø–µ—Ä–µ–¥–∞–º–æ —ó—Ö —Å–ø–µ—Ü—ñ–∞–ª—ñ—Å—Ç—É –¥–ª—è –æ–±—Ä–æ–±–∫–∏.\n\n"
            "üí° <i>–©–æ–± –ø–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –≤ –º–µ–Ω—é, –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ /menu</i>"
        )
        await query.edit_message_text(
            files_text,
            parse_mode='HTML'
        )
        return FILES_MODE

    elif query.data == "price":
        try:
            # –ù–∞–¥—Å–∏–ª–∞—î–º–æ –ø—Ä–∞–π—Å-–ª–∏—Å—Ç–∏ —è–∫ –ª–æ–∫–∞–ª—å–Ω—ñ —Ñ–∞–π–ª–∏
            with open("price_1.jpg", "rb") as photo1:
                await query.message.reply_photo(
                    photo=photo1,
                    caption="üí∞ <b>–ü—Ä–∞–π—Å-–ª–∏—Å—Ç: –•—ñ—Ä—É—Ä–≥—ñ—á–Ω—ñ —à–∞–±–ª–æ–Ω–∏</b>\n\n–ê–∫—Ç—É–∞–ª—å–Ω—ñ —Ü—ñ–Ω–∏ –Ω–∞ —Ö—ñ—Ä—É—Ä–≥—ñ—á–Ω—ñ —à–∞–±–ª–æ–Ω–∏ –∑ –æ–ø–æ—Ä–æ—é –Ω–∞ –∑—É–±–∏:",
                    parse_mode='HTML'
                )
            
            with open("price_2.jpg", "rb") as photo2:
                await query.message.reply_photo(
                    photo=photo2,
                    caption="üí∞ <b>–ü—Ä–∞–π—Å-–ª–∏—Å—Ç: –†—ñ–∑–Ω—ñ –ø–æ—Å–ª—É–≥–∏</b>\n\n–ü–æ–≤–Ω–∏–π –ø–µ—Ä–µ–ª—ñ–∫ –Ω–∞—à–∏—Ö –ø–æ—Å–ª—É–≥ —Ç–∞ —ó—Ö –≤–∞—Ä—Ç—ñ—Å—Ç—å:",
                    parse_mode='HTML'
                )
            
            with open("price_3.jpg", "rb") as photo3:
                await query.message.reply_photo(
                    photo=photo3,
                    caption="üí∞ <b>–ü—Ä–∞–π—Å-–ª–∏—Å—Ç: –û—Å–Ω–æ–≤–Ω—ñ –ø–æ—Å–ª—É–≥–∏</b>\n\n–î–µ—Ç–∞–ª—å–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –Ω–∞—à—ñ –æ—Å–Ω–æ–≤–Ω—ñ –ø–æ—Å–ª—É–≥–∏:",
                    parse_mode='HTML'
                )
            
            keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu")]]
            await query.message.reply_text(
                "üìã <b>–ü—Ä–∞–π—Å-–ª–∏—Å—Ç–∏ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ!</b>\n\n"
                "üìû –î–ª—è —É—Ç–æ—á–Ω–µ–Ω–Ω—è –¥–µ—Ç–∞–ª–µ–π –∞–±–æ —ñ–Ω–¥–∏–≤—ñ–¥—É–∞–ª—å–Ω–∏—Ö —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—ñ–≤ –∑–≤'—è–∂—ñ—Ç—å—Å—è –∑ –Ω–∞—à–æ—é –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é.",
                parse_mode='HTML',
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
            
        except FileNotFoundError as e:
            logging.error(f"–§–∞–π–ª –ø—Ä–∞–π—Å—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ: {e}")
            keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu")]]
            await query.message.reply_text(
                "‚ùå <b>–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø—Ä–∞–π—Å—É</b>\n\n"
                "üìû –ó–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –ø—ñ–¥—Ç—Ä–∏–º–∫–∏ –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∞–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ –ø—Ä–∞–π—Å-–ª–∏—Å—Ç–∞.",
                parse_mode='HTML',
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
        
        return MAIN_MENU

    elif query.data == "website":
        # –ü–æ–≤—ñ–¥–æ–º–ª—è—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É –ø—Ä–æ —Å–∞–π—Ç –±–µ–∑ –∫–Ω–æ–ø–æ–∫, —â–æ –≤–µ–¥—É—Ç—å –Ω–∞ —Å—Ç–∞—Ä–∏–π URL.
        website_text = (
            f"üåê <b>–ù–∞—à –æ—Ñ—ñ—Ü—ñ–π–Ω–∏–π —Å–∞–π—Ç</b>\n\n"
            f"üîó ObaBko Lab - –¶–∏—Ñ—Ä–æ–≤–∞ —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥—ñ—è: {WEBSITE_URL}\n\n"
            "üí° –ù–∞ —Å–∞–π—Ç—ñ –≤–∏ –∑–Ω–∞–π–¥–µ—Ç–µ:\n"
            "‚Ä¢ –ü–æ–≤–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –Ω–∞—à—ñ –ø–æ—Å–ª—É–≥–∏\n"
            "‚Ä¢ –ü–æ—Ä—Ç—Ñ–æ–ª—ñ–æ —Ä–æ–±—ñ—Ç\n"
            "‚Ä¢ –ö–æ–Ω—Ç–∞–∫—Ç–Ω—ñ –¥–∞–Ω—ñ\n"
            "‚Ä¢ –§–æ—Ä–º—É –¥–ª—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è\n"
        )

        # –¢–µ–ø–µ—Ä –¥–æ–¥–∞—î–º–æ –ª–∏—à–µ –∫–Ω–æ–ø–∫—É –¥–ª—è –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –≤ –º–µ–Ω—é, –Ω–µ –ø–µ—Ä–µ–¥–∞—é—á–∏ URL
        keyboard = [
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu")]
        ]
        await query.edit_message_text(
            website_text,
            parse_mode='HTML',
            reply_markup=InlineKeyboardMarkup(keyboard),
            disable_web_page_preview=False
        )
        return MAIN_MENU

    elif query.data == "help":
        help_text = (
            "üÜò <b>–î–æ–≤—ñ–¥–∫–∞ –ø–æ –±–æ—Ç—É</b>\n\n"
            "<b>üìã –î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:</b>\n"
            "‚Ä¢ <code>/start</code> - –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é\n"
            "‚Ä¢ <code>/menu</code> - –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –≤ –º–µ–Ω—é\n"
            "‚Ä¢ <code>/cancel</code> - –°–∫–∞—Å—É–≤–∞—Ç–∏ –æ–ø–µ—Ä–∞—Ü—ñ—é\n\n"
            "<b>üìû –¢–µ—Ö–Ω—ñ—á–Ω–∞ –ø—ñ–¥—Ç—Ä–∏–º–∫–∞:</b>\n"
            f"‚Ä¢ Telegram: {ADMIN_USERNAME}\n\n"
            "<b>üí° –Ø–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ç–∏—Å—è –±–æ—Ç–æ–º:</b>\n"
            "1. –û–±–µ—Ä—ñ—Ç—å –ø–æ—Ç—Ä—ñ–±–Ω—É –¥—ñ—é –≤ –≥–æ–ª–æ–≤–Ω–æ–º—É –º–µ–Ω—é\n"
            "2. –°–ª—ñ–¥—É–π—Ç–µ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è–º –±–æ—Ç–∞\n"
            "3. –ü—Ä–∏ –≤–∏–Ω–∏–∫–Ω–µ–Ω–Ω—ñ –ø–∏—Ç–∞–Ω—å –∑–≤–µ—Ä—Ç–∞–π—Ç–µ—Å—è –≤ –ø—ñ–¥—Ç—Ä–∏–º–∫—É"
        )
        
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu")]]
        await query.edit_message_text(
            help_text,
            parse_mode='HTML',
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        return MAIN_MENU
        
    elif query.data == "back_to_menu":
        return await show_main_menu(update, context)

# üí¨ –ß–∞—Ç –∑ –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é
async def chat_handler(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–æ–±–Ω–∏–∫ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å —É —Ä–µ–∂–∏–º—ñ —á–∞—Ç—É - –ø–µ—Ä–µ—Å–∏–ª–∞—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É"""
    user_message = update.message.text
    user = update.effective_user
    username = user.username or "–ù–µ–≤—ñ–¥–æ–º–æ"
    first_name = user.first_name or ""
    
    admin_msg = (
        "üí¨ <b>–ü–û–í–Ü–î–û–ú–õ–ï–ù–ù–Ø –í–Ü–î –ö–û–†–ò–°–¢–£–í–ê–ß–ê</b>\n\n"
        f"üë§ <b>–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á:</b> {first_name} (@{username})\n"
        f"üÜî <b>ID:</b> <code>{user.id}</code>\n"
        f"üìù <b>–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:</b>\n{user_message}"
    )
    
    try:
        await context.bot.send_message(
            chat_id=ADMIN_CHAT_ID,
            text=admin_msg,
            parse_mode='HTML'
        )
        
        await update.message.reply_text(
            "‚úÖ <b>–í–∞—à–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ!</b>\n\n"
            "üìû –°–ø–µ—Ü—ñ–∞–ª—ñ—Å—Ç –∑–≤'—è–∂–µ—Ç—å—Å—è –∑ –≤–∞–º–∏ –Ω–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º.\n\n"
            "üí° <i>–í–∏ –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ –ø–∏—Å–∞—Ç–∏ –∞–±–æ –ø–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –≤</i> /menu",
            parse_mode='HTML'
        )
        
    except Exception as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—É: {e}")
        await update.message.reply_text(
            "‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.\n"
            "–ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ –∞–±–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ /menu"
        )
    
    return CHAT_MODE

# üìÅ –ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è —Ñ–∞–π–ª—ñ–≤
async def files_handler(update: Update, context: CallbackContext):
    """–û–±—Ä–æ–±–Ω–∏–∫ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è —Ñ–∞–π–ª—ñ–≤ - –ø–µ—Ä–µ—Å–∏–ª–∞—î —Ñ–∞–π–ª–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É"""
    user = update.effective_user
    username = user.username or "–ù–µ–≤—ñ–¥–æ–º–æ"
    first_name = user.first_name or ""

    message_type = update.message.effective_attachment
    
    if message_type:
        caption = (
            f"üìÅ <b>–§–∞–π–ª –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞</b>\n\n"
            f"üë§ <b>–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á:</b> {first_name} (@{username})\n"
            f"üÜî <b>ID:</b> <code>{user.id}</code>"
        )
        
        try:
            # –ü–µ—Ä–µ—Å–∏–ª–∞—î–º–æ —Ñ–∞–π–ª –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É
            await context.bot.forward_message(
                chat_id=ADMIN_CHAT_ID,
                from_chat_id=update.message.chat_id,
                message_id=update.message.message_id
            )
            # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            await context.bot.send_message(
                chat_id=ADMIN_CHAT_ID,
                text=caption,
                parse_mode='HTML'
            )
            
            await update.message.reply_text(
                "‚úÖ <b>–§–∞–π–ª —É—Å–ø—ñ—à–Ω–æ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ!</b>\n\n"
                "üìû –°–ø–µ—Ü—ñ–∞–ª—ñ—Å—Ç –æ–ø—Ä–∞—Ü—é—î –≤–∞—à —Ñ–∞–π–ª –Ω–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º.\n\n"
                "üí° <i>–í–∏ –º–æ–∂–µ—Ç–µ –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ —â–µ —Ñ–∞–π–ª–∏ –∞–±–æ –ø–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –≤</i> /menu",
                parse_mode='HTML'
            )

        except Exception as e:
            logging.error(f"–ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ—Å–∏–ª–∞–Ω–Ω—è —Ñ–∞–π–ª—É: {e}")
            await update.message.reply_text(
                "‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–Ω—ñ —Ñ–∞–π–ª—É.\n"
                "–ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ –∞–±–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ /menu"
            )
    else:
        await update.message.reply_text(
            "üìÅ –ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å —Ñ–∞–π–ª (—Ñ–æ—Ç–æ, –¥–æ–∫—É–º–µ–Ω—Ç, —Å–∫–∞–Ω).\n\n"
            "üí° –©–æ–± –ø–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –≤ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é, –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ /menu"
        )

    return FILES_MODE

# üìù –û–±—Ä–æ–±–Ω–∏–∫–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è - –í–°–ï –§–ò–õ–¨–¢–†–´ –û–¢–ö–õ–Æ–ß–ï–ù–´!
async def doctor_handler(update: Update, context: CallbackContext) -> int:
    """–ü—Ä–∏–Ω–∏–º–∞–µ—Ç –õ–Æ–ë–û–ô —Ç–µ–∫—Å—Ç –¥–ª—è –∏–º–µ–Ω–∏ –≤—Ä–∞—á–∞"""
    doctor_name = update.message.text.strip()
    # –û–¢–ö–õ–Æ–ß–ï–ù–ê –≤–∞–ª–∏–¥–∞—Ü–∏—è –¥–ª–∏–Ω—ã - –ø—Ä–∏–Ω–∏–º–∞–µ–º –ª—é–±–æ–π —Ç–µ–∫—Å—Ç
    context.user_data["doctor"] = doctor_name
    await update.message.reply_text("üìû –í–≤–µ–¥—ñ—Ç—å <b>–∫–æ–Ω—Ç–∞–∫—Ç–Ω–∏–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É</b>:\n<i>(–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: +380501234567)</i>", parse_mode='HTML')
    return PHONE

async def phone_handler(update: Update, context: CallbackContext) -> int:
    """–ü—Ä–∏–Ω–∏–º–∞–µ—Ç –õ–Æ–ë–û–ô —Ç–µ–∫—Å—Ç –¥–ª—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
    phone = update.message.text.strip()
    # –û–¢–ö–õ–Æ–ß–ï–ù–ê –≤–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∞ - –ø—Ä–∏–Ω–∏–º–∞–µ–º –ª—é–±–æ–π —Ç–µ–∫—Å—Ç
    context.user_data["phone"] = phone
    await update.message.reply_text("üè• –í–≤–µ–¥—ñ—Ç—å <b>–Ω–∞–∑–≤—É –∫–ª—ñ–Ω—ñ–∫–∏</b>:", parse_mode='HTML')
    return CLINIC

async def clinic_handler(update: Update, context: CallbackContext) -> int:
    """–ü—Ä–∏–Ω–∏–º–∞–µ—Ç –õ–Æ–ë–û–ô —Ç–µ–∫—Å—Ç –¥–ª—è –∫–ª–∏–Ω–∏–∫–∏"""
    clinic_name = update.message.text.strip()
    # –û–¢–ö–õ–Æ–ß–ï–ù–ê –≤–∞–ª–∏–¥–∞—Ü–∏—è –¥–ª–∏–Ω—ã - –ø—Ä–∏–Ω–∏–º–∞–µ–º –ª—é–±–æ–π —Ç–µ–∫—Å—Ç
    context.user_data["clinic"] = clinic_name
    await update.message.reply_text("üìÖ –í–≤–µ–¥—ñ—Ç—å <b>–¥–∞—Ç—É –∑–¥–∞—á—ñ</b> —É —Ñ–æ—Ä–º–∞—Ç—ñ –î–î.–ú–ú.–†–†–†–†:", parse_mode='HTML')
    return DATETIME

async def datetime_handler(update: Update, context: CallbackContext) -> int:
    """–ü—Ä–∏–Ω–∏–º–∞–µ—Ç –õ–Æ–ë–û–ô —Ç–µ–∫—Å—Ç –¥–ª—è –¥–∞—Ç—ã"""
    date_str = update.message.text.strip()
    # –û–¢–ö–õ–Æ–ß–ï–ù–ê –≤–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞—Ç—ã - –ø—Ä–∏–Ω–∏–º–∞–µ–º –ª—é–±–æ–π —Ç–µ–∫—Å—Ç
    context.user_data["date"] = date_str
    await update.message.reply_text("üë§ –í–≤–µ–¥—ñ—Ç—å <b>–ü–Ü–ë –ø–∞—Ü—ñ—î–Ω—Ç–∞</b>:", parse_mode='HTML')
    return PATIENT

async def patient_handler(update: Update, context: CallbackContext) -> int:
    """–ü—Ä–∏–Ω–∏–º–∞–µ—Ç –õ–Æ–ë–û–ô —Ç–µ–∫—Å—Ç –¥–ª—è –ø–∞—Ü–∏–µ–Ω—Ç–∞"""
    patient_name = update.message.text.strip()
    # –û–¢–ö–õ–Æ–ß–ï–ù–ê –≤–∞–ª–∏–¥–∞—Ü–∏—è –¥–ª–∏–Ω—ã - –ø—Ä–∏–Ω–∏–º–∞–µ–º –ª—é–±–æ–π —Ç–µ–∫—Å—Ç
    context.user_data["patient"] = patient_name
    await update.message.reply_text("üî© –í–≤–µ–¥—ñ—Ç—å <b>—Å–∏—Å—Ç–µ–º—É —ñ–º–ø–ª–∞–Ω—Ç–∞—Ç—ñ–≤</b>:", parse_mode='HTML')
    return IMPLANT_SYSTEM

async def implant_handler(update: Update, context: CallbackContext) -> int:
    """–ü—Ä–∏–Ω–∏–º–∞–µ—Ç –õ–Æ–ë–û–ô —Ç–µ–∫—Å—Ç –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –∏–º–ø–ª–∞–Ω—Ç–∞—Ç–æ–≤"""
    implant_system = update.message.text.strip()
    # –û–¢–ö–õ–Æ–ß–ï–ù–ê –≤–∞–ª–∏–¥–∞—Ü–∏—è –¥–ª–∏–Ω—ã - –ø—Ä–∏–Ω–∏–º–∞–µ–º –ª—é–±–æ–π —Ç–µ–∫—Å—Ç
    context.user_data["implant_system"] = implant_system
    await update.message.reply_text("ü¶∑ –í–≤–µ–¥—ñ—Ç—å <b>–ø–µ—Ä–µ–¥–±–∞—á—É–≤–∞–Ω—É –∑–æ–Ω—É –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è —ñ–º–ø–ª–∞–Ω—Ç–∞—Ç—ñ–≤</b>:\n<i>–í–∫–∞–∂—ñ—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç—ñ \"–Ω–æ–º–µ—Ä –∑—É–±–∞ - –¥—ñ–∞–º–µ—Ç—Ä/–¥–æ–≤–∂–∏–Ω–∞ —ñ–º–ø–ª–∞–Ω—Ç–∞—Ç–∞\"</i>", parse_mode='HTML')
    return ZONE

async def zone_handler(update: Update, context: CallbackContext) -> int:
    """–ü—Ä–∏–Ω–∏–º–∞–µ—Ç –õ–Æ–ë–û–ô —Ç–µ–∫—Å—Ç –¥–ª—è –∑–æ–Ω—ã –∏–º–ø–ª–∞–Ω—Ç–∞—Ü–∏–∏ - –ë–ï–ó –í–°–Ø–ö–ò–• –ü–†–û–í–ï–†–û–ö!"""
    zone = update.message.text.strip()
    
    # –û–¢–ö–õ–Æ–ß–ï–ù–´ –í–°–ï –ü–†–û–í–ï–†–ö–ò - –ø—Ä–∏–Ω–∏–º–∞–µ–º –ª—é–±–æ–π —Ç–µ–∫—Å—Ç!
    # –î–∞–∂–µ –ø—É—Å—Ç–æ–π —Ç–µ–∫—Å—Ç —Ç–µ–ø–µ—Ä—å –ø—Ä–∏–Ω–∏–º–∞–µ—Ç—Å—è
    
    context.user_data["user_id"] = update.effective_user.id
    context.user_data["zone"] = zone
    context.user_data["status"] = "–ù–æ–≤–∏–π"
    context.user_data["timestamp"] = datetime.now().strftime("%d.%m.%Y %H:%M:%S")
    
    # –ü–æ–∫–∞–∑—É—î–º–æ –ø—ñ–¥—Å—É–º–æ–∫ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
    await show_order_summary(update, context)

    # üéØ –í–ò–ö–õ–ò–ö–ê–Ñ–ú–û –ê–ù–ê–õ–Ü–ó –°–¢–†–£–ö–¢–£–†–ò –ü–ï–†–ï–î –ó–ë–ï–†–ï–ñ–ï–ù–ù–Ø–ú (–¥–ª—è –Ω–∞–ª–∞–≥–æ–¥–∂–µ–Ω–Ω—è)
    analyze_sheet_structure()

    success = save_to_sheet(context.user_data)
    
    if success:
        await notify_admin_async(context)
        keyboard = [[InlineKeyboardButton("üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="back_to_menu")]]
        await update.message.reply_text(
            "‚úÖ <b>–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ –ø—Ä–∏–π–Ω—è—Ç–æ —ñ –∑–±–µ—Ä–µ–∂–µ–Ω–æ!</b>\n\n"
            f"üìû –°–ø–µ—Ü—ñ–∞–ª—ñ—Å—Ç {ADMIN_USERNAME} –∑–≤'—è–∂–µ—Ç—å—Å—è –∑ –≤–∞–º–∏ –Ω–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º.",
            parse_mode='HTML',
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    else:
        keyboard = [[InlineKeyboardButton("üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="back_to_menu")]]
        await update.message.reply_text(
            "‚ö†Ô∏è <b>–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–∏–π–Ω—è—Ç–æ, –∞–ª–µ –≤–∏–Ω–∏–∫–ª–∞ –ø—Ä–æ–±–ª–µ–º–∞ –∑—ñ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è–º.</b>\n"
            f"üìû {ADMIN_USERNAME} –±—É–≤ —Å–ø–æ–≤—ñ—â–µ–Ω–∏–π.",
            parse_mode='HTML',
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    
    return MAIN_MENU

# –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â—É—é —Ñ—É–Ω–∫—Ü–∏—é show_order_summary
async def show_order_summary(update: Update, context: CallbackContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–≤–æ–¥–∫—É –∑–∞–∫–∞–∑–∞ –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º"""
    data = context.user_data
    
    summary_text = (
        "üìã <b>–ü—ñ–¥—Å—É–º–æ–∫ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:</b>\n\n"
        f"üë®‚Äç‚öïÔ∏è <b>–õ—ñ–∫–∞—Ä:</b> {data.get('doctor', 'N/A')}\n"
        f"üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {data.get('phone', 'N/A')}\n"
        f"üè• <b>–ö–ª—ñ–Ω—ñ–∫–∞:</b> {data.get('clinic', 'N/A')}\n"
        f"üìÖ <b>–î–∞—Ç–∞ –∑–¥–∞—á—ñ:</b> {data.get('date', 'N/A')}\n"
        f"üë§ <b>–ü–∞—Ü—ñ—î–Ω—Ç:</b> {data.get('patient', 'N/A')}\n"
        f"üî© <b>–°–∏—Å—Ç–µ–º–∞:</b> {data.get('implant_system', 'N/A')}\n"
        f"ü¶∑ <b>–ó–æ–Ω–∞:</b> {data.get('zone', 'N/A')}\n\n"
        "üîÑ <i>–û–±—Ä–æ–±–ª—è—î–º–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è...</i>"
    )
    
    await update.message.reply_text(summary_text, parse_mode='HTML')

async def notify_admin_async(context: CallbackContext):
    try:
        data = context.user_data
        user_id = data.get('user_id', 'N/A')
        
        msg = (
            "üÜï <b>–ù–û–í–ï –ó–ê–ú–û–í–õ–ï–ù–ù–Ø –Ü–ú–ü–õ–ê–ù–¢–ê–¢–ê</b>\n\n"
            f"üë®‚Äç‚öïÔ∏è <b>–õ—ñ–∫–∞—Ä:</b> {data.get('doctor', 'N/A')}\n"
            f"üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {data.get('phone', 'N/A')}\n"
            f"üè• <b>–ö–ª—ñ–Ω—ñ–∫–∞:</b> {data.get('clinic', 'N/A')}\n"
            f"üìÖ <b>–î–∞—Ç–∞ –∑–¥–∞—á—ñ:</b> {data.get('date', 'N/A')}\n"
            f"üë§ <b>–ü–∞—Ü—ñ—î–Ω—Ç:</b> {data.get('patient', 'N/A')}\n"
            f"üî© <b>–°–∏—Å—Ç–µ–º–∞:</b> {data.get('implant_system', 'N/A')}\n"
            f"ü¶∑ <b>–ó–æ–Ω–∞:</b> {data.get('zone', 'N/A')}\n"
            f"üìå <b>–°—Ç–∞—Ç—É—Å:</b> {data.get('status', 'N/A')}\n"
            f"‚è∞ <b>–ß–∞—Å:</b> {data.get('timestamp', 'N/A')}\n"
            f"üÜî <b>User ID:</b> <code>{user_id}</code>"
        )
        
        admin_keyboard = [
            [InlineKeyboardButton("‚úÖ –ü—Ä–∏–π–Ω—è—Ç–∏", callback_data=f"accept_{user_id}")],
            [InlineKeyboardButton("‚ùå –í—ñ–¥—Ö–∏–ª–∏—Ç–∏", callback_data=f"reject_{user_id}")],
            [InlineKeyboardButton("üí¨ –í—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏", callback_data=f"reply_{user_id}")],
        ]
        
        await context.bot.send_message(
            chat_id=ADMIN_CHAT_ID,
            text=msg,
            parse_mode='HTML',
            reply_markup=InlineKeyboardMarkup(admin_keyboard)
        )
        
        logging.info("–°–ø–æ–≤—ñ—â–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ")
        
    except Exception as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—É: {e}")

async def admin_callback_handler(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()
    
    if query.from_user.id != ADMIN_CHAT_ID:
        await query.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –ø—Ä–∞–≤", show_alert=True)
        return
    
    action, user_id = query.data.split("_", 1)
    
    if action == "accept":
        await query.edit_message_reply_markup(
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("‚úÖ –ü–†–ò–ô–ù–Ø–¢–û", callback_data="accepted")
            ]])
        )
        
        try:
            await context.bot.send_message(
                chat_id=int(user_id),
                text="‚úÖ <b>–í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–∏–π–Ω—è—Ç–æ!</b>\n\n"
                     f"üìû –ù–∞—à —Å–ø–µ—Ü—ñ–∞–ª—ñ—Å—Ç {ADMIN_USERNAME} –∑–≤'—è–∂–µ—Ç—å—Å—è –∑ –≤–∞–º–∏ –Ω–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º.",
                parse_mode='HTML'
            )
        except Exception as e:
            logging.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {user_id}: {e}")
    
    elif action == "reject":
        await query.edit_message_reply_markup(
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("‚ùå –í–Ü–î–•–ò–õ–ï–ù–û", callback_data="rejected")
            ]])
        )
        
        try:
            await context.bot.send_message(
                chat_id=int(user_id),
                text="‚ùå <b>–í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –≤—ñ–¥—Ö–∏–ª–µ–Ω–æ</b>\n\n"
                     f"üìû –ó–≤'—è–∂—ñ—Ç—å—Å—è –∑ {ADMIN_USERNAME} –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–Ω—è –¥–µ—Ç–∞–ª–µ–π.",
                parse_mode='HTML'
            )
        except Exception as e:
            logging.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {user_id}: {e}")
    
    elif action == "reply":
        context.chat_data['admin_reply_to'] = user_id
        await query.message.reply_text(
            f"üí¨ –í–≤–µ–¥—ñ—Ç—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id}:"
        )

async def admin_message_handler(update: Update, context: CallbackContext):
    if update.effective_user.id != ADMIN_CHAT_ID:
        return
    
    reply_to = context.chat_data.get('admin_reply_to')
    if reply_to:
        try:
            admin_message = update.message.text
            await context.bot.send_message(
                chat_id=int(reply_to),
                text=f"üì© <b>–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞:</b>\n\n{admin_message}",
                parse_mode='HTML'
            )
            
            await update.message.reply_text(
                f"‚úÖ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {reply_to}"
            )
            
            context.chat_data.pop('admin_reply_to', None)
            
        except Exception as e:
            await update.message.reply_text(
                f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {e}"
            )
            context.chat_data.pop('admin_reply_to', None)

async def menu_command(update: Update, context: CallbackContext) -> int:
    return await show_main_menu(update, context)

async def cancel_handler(update: Update, context: CallbackContext) -> int:
    keyboard = [[InlineKeyboardButton("üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="back_to_menu")]]
    await update.message.reply_text(
        "‚ùå <b>–û–ø–µ—Ä–∞—Ü—ñ—é —Å–∫–∞—Å–æ–≤–∞–Ω–æ</b>",
        parse_mode='HTML',
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    return MAIN_MENU

async def error_handler(update: object, context: CallbackContext):
    logging.error(f"Exception: {context.error}")
    if isinstance(update, Update) and update.effective_message:
        await update.effective_message.reply_text(
            "‚ö†Ô∏è –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞. –í–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ /start –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫—É."
        )

def main():
    logging.basicConfig(
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
        level=logging.INFO,
        handlers=[
            logging.FileHandler('bot.log', encoding='utf-8'),
            logging.StreamHandler()
        ]
    )
    
    if not WORKSHEET:
        logging.error("–ù–µ –≤–¥–∞–ª–æ—Å—è –ø—ñ–¥–∫–ª—é—á–∏—Ç–∏—Å—è –¥–æ Google Sheets!")
        return
    
    logging.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    
    # üîç –ê–ù–ê–õ–Ü–ó –°–¢–†–£–ö–¢–£–†–ò –¢–ê–ë–õ–ò–¶–Ü –ü–†–ò –ó–ê–ü–£–°–ö–£
    analyze_sheet_structure()
    
    application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()
    
    conv_handler = ConversationHandler(
        entry_points=[
            CommandHandler("start", start),
            CallbackQueryHandler(menu_callback, pattern="^(new_order|chat_support|send_files|help|back_to_menu|price|website)$")
        ],
        states={
            MAIN_MENU: [
                CallbackQueryHandler(menu_callback, pattern="^(new_order|chat_support|send_files|help|back_to_menu|price|website)$")
            ],
            DOCTOR: [MessageHandler(filters.TEXT & ~filters.COMMAND, doctor_handler)],
            PHONE: [MessageHandler(filters.TEXT & ~filters.COMMAND, phone_handler)],
            CLINIC: [MessageHandler(filters.TEXT & ~filters.COMMAND, clinic_handler)],
            DATETIME: [MessageHandler(filters.TEXT & ~filters.COMMAND, datetime_handler)],
            PATIENT: [MessageHandler(filters.TEXT & ~filters.COMMAND, patient_handler)],
            IMPLANT_SYSTEM: [MessageHandler(filters.TEXT & ~filters.COMMAND, implant_handler)],
            ZONE: [MessageHandler(filters.TEXT & ~filters.COMMAND, zone_handler)],
            CHAT_MODE: [MessageHandler(filters.TEXT & ~filters.COMMAND, chat_handler)],
            FILES_MODE: [MessageHandler(filters.ATTACHMENT | (filters.TEXT & ~filters.COMMAND), files_handler)],
        },
        fallbacks=[
            CommandHandler("cancel", cancel_handler),
            CommandHandler("menu", menu_command),
            CommandHandler("start", start),
        ],
        per_message=False,
    )
    
    application.add_handler(conv_handler)
    application.add_handler(CommandHandler("menu", menu_command))
    application.add_handler(CallbackQueryHandler(admin_callback_handler, pattern="^(accept_|reject_|reply_)"))
    application.add_handler(MessageHandler(filters.TEXT & filters.Chat(chat_id=ADMIN_CHAT_ID) & ~filters.COMMAND, admin_message_handler))
    application.add_error_handler(error_handler)
    
    logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ. –ü–æ—á–∏–Ω–∞—é polling...")

    try:
        application.run_polling(allowed_updates=Update.ALL_TYPES)
    except KeyboardInterrupt:
        logging.info("–û—Ç—Ä–∏–º–∞–Ω–æ —Å–∏–≥–Ω–∞–ª –∑—É–ø–∏–Ω–∫–∏")
    except Exception as e:
        logging.error(f"–ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {e}")
    finally:
        logging.info("–ë–æ—Ç –∑—É–ø–∏–Ω–µ–Ω–æ")

if __name__ == '__main__':
    main()
